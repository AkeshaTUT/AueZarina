import asyncio
import aiohttp
import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import re

logger = logging.getLogger(__name__)

class SimpleFreeGamesParser:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä"""
    
    def __init__(self):
        self.user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    
    async def get_all_free_games(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä"""
        free_games = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã
        permanent_free = self._get_permanent_free_games()
        free_games.extend(permanent_free)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Epic Games Store
        try:
            epic_games = await self._get_epic_free_games_simple()
            free_games.extend(epic_games)
        except Exception as e:
            logger.error(f"Epic Games parsing failed: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ F2P –∏–≥—Ä—ã Steam
        steam_f2p = self._get_steam_f2p_games()
        free_games.extend(steam_f2p)
        
        return free_games
    
    def _get_permanent_free_games(self) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä"""
        return [
            {
                'title': 'Counter-Strike 2',
                'description': 'üî• –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —à—É—Ç–µ—Ä –æ—Ç Valve',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/730/CounterStrike_2/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': 'https://cdn.akamai.steamstatic.com/steam/apps/730/header.jpg'
            },
            {
                'title': 'Dota 2',
                'description': '‚öîÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω–∞—è MOBA –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π Steam',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/570/Dota_2/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': 'https://cdn.akamai.steamstatic.com/steam/apps/570/header.jpg'
            },
            {
                'title': 'Team Fortress 2',
                'description': 'üéØ –ö–æ–º–∞–Ω–¥–Ω—ã–π —à—É—Ç–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/440/Team_Fortress_2/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': 'https://cdn.akamai.steamstatic.com/steam/apps/440/header.jpg'
            },
            {
                'title': 'Warframe',
                'description': 'üöÄ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —à—É—Ç–µ—Ä –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/230410/Warframe/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': 'https://cdn.akamai.steamstatic.com/steam/apps/230410/header.jpg'
            },
            {
                'title': 'Fortnite',
                'description': 'üèÜ –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞',
                'platform': 'Epic Games Store',
                'url': 'https://store.epicgames.com/en-US/p/fortnite',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': ''
            }
        ]
    
    def _get_steam_f2p_games(self) -> List[Dict]:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ F2P –∏–≥—Ä—ã Steam"""
        return [
            {
                'title': 'Apex Legends',
                'description': 'üéÆ Battle Royale –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π Titanfall',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/1172470/Apex_Legends/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': ''
            },
            {
                'title': 'Path of Exile',
                'description': '‚öîÔ∏è –ú—Ä–∞—á–Ω–∞—è action-RPG',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/238960/Path_of_Exile/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': ''
            },
            {
                'title': 'Lost Ark',
                'description': 'üèõÔ∏è MMORPG —Å –∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º –≤–∏–¥–æ–º',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/1599340/Lost_Ark/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': ''
            }
        ]
    
    async def _get_epic_free_games_simple(self) -> List[Dict]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä Epic Games"""
        games = []
        
        try:
            timeout = aiohttp.ClientTimeout(total=15)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                url = "https://store-site-backend-static-ipv4.ak.epicgames.com/freeGamesPromotions"
                params = {
                    'locale': 'en-US',
                    'country': 'US',
                    'allowCountries': 'US'
                }
                
                headers = {
                    'User-Agent': self.user_agent,
                    'Accept': 'application/json, text/plain, */*',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Cache-Control': 'no-cache'
                }
                
                async with session.get(url, params=params, headers=headers) as response:
                    if response.status == 200:
                        try:
                            data = await response.json()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                            if data and 'data' in data:
                                catalog = data['data'].get('Catalog', {})
                                search_store = catalog.get('searchStore', {})
                                elements = search_store.get('elements', [])
                                
                                for element in elements:
                                    if self._has_free_promotion(element):
                                        game_info = self._parse_epic_game_simple(element)
                                        if game_info:
                                            games.append(game_info)
                                            
                        except Exception as parse_error:
                            logger.error(f"Error parsing Epic Games response: {parse_error}")
                    else:
                        logger.warning(f"Epic Games API returned status {response.status}")
                        
        except Exception as e:
            logger.error(f"Error fetching Epic Games data: {e}")
        
        return games
    
    def _has_free_promotion(self, element: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä—ã –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è"""
        try:
            promotions = element.get('promotions')
            if not promotions:
                return False
            
            current_promotions = promotions.get('promotionalOffers', [])
            upcoming_promotions = promotions.get('upcomingPromotionalOffers', [])
            
            return len(current_promotions) > 0 or len(upcoming_promotions) > 0
            
        except Exception:
            return False
    
    def _parse_epic_game_simple(self, element: dict) -> Optional[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä—ã Epic Games"""
        try:
            title = element.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
            description = element.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            
            # URL –∏–≥—Ä—ã
            url_slug = element.get('catalogNs', {}).get('mappings', [])
            game_url = "https://store.epicgames.com/en-US/free-games"
            if url_slug and len(url_slug) > 0:
                page_slug = url_slug[0].get('pageSlug', '')
                if page_slug:
                    game_url = f"https://store.epicgames.com/en-US/p/{page_slug}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
            promotions = element.get('promotions', {})
            current_promos = promotions.get('promotionalOffers', [])
            upcoming_promos = promotions.get('upcomingPromotionalOffers', [])
            
            if current_promos:
                end_date = "–î–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏"
                status = "üî• –î–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å"
            elif upcoming_promos:
                end_date = "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
                status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è"
            else:
                return None
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            if len(description) > 100:
                description = description[:97] + "..."
            
            return {
                'title': title,
                'description': f'{status} - {description}',
                'platform': 'Epic Games Store',
                'url': game_url,
                'end_date': end_date,
                'image_url': ''
            }
            
        except Exception as e:
            logger.error(f"Error parsing Epic game: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–¥–∞—á–∞—Ö
async def get_current_free_games() -> List[Dict]:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä"""
    parser = SimpleFreeGamesParser()
    
    try:
        games = await parser.get_all_free_games()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ Epic Games (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏), –ø–æ—Ç–æ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
        epic_games = [g for g in games if g['platform'] == 'Epic Games Store']
        other_games = [g for g in games if g['platform'] != 'Epic Games Store']
        
        return epic_games + other_games
        
    except Exception as e:
        logger.error(f"Error getting free games: {e}")
        return []

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
FreeGamesParser = SimpleFreeGamesParser

class FreeGamesScraper:
    """–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    async def get_freebies_info(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–¥–∞—á–∞—Ö"""
        return [
            {
                'title': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏ Epic Games',
                'description': 'üéÅ –ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞',
                'platform': 'Epic Games Store',
                'url': 'https://store.epicgames.com/en-US/free-games',
                'end_date': '–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é',
                'image_url': ''
            },
            {
                'title': 'Steam Free-to-Play',
                'description': 'üéÆ –°–æ—Ç–Ω–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/genre/Free%20to%20Play/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': ''
            }
        ]
