"""
🔄 СХЕМА РАБОТЫ ЕЖЕНЕДЕЛЬНОГО ДАЙДЖЕСТА ZARINAI BOT
================================================================

┌─────────────────────────────────────────────────────────────────┐
│                    📊 1. СБОР ДАННЫХ                            │
└─────────────────────────────────────────────────────────────────┘
    ↓
    Пользователь запускает /deals
    ↓
    Бот получает актуальные скидки через Steam API/парсер
    ↓
    Вызывается update_weekly_digest_data(deals)
    ↓
    Игры сортируются по размеру скидки (по убыванию)
    ↓
    ТОП-10 игр с самыми большими скидками сохраняются в БД

┌─────────────────────────────────────────────────────────────────┐
│                   💾 2. ХРАНЕНИЕ В БД                           │
└─────────────────────────────────────────────────────────────────┘
    
    📋 Таблица: weekly_top
    ┌─────────────────┬──────────────┬───────────────────┐
    │   game_title    │   discount   │  discounted_price │
    ├─────────────────┼──────────────┼───────────────────┤
    │ Cyberpunk 2077  │      85      │      399.00       │
    │ The Witcher 3   │      90      │      199.00       │
    │ GTA V           │      75      │      599.00       │
    │ ...             │     ...      │       ...         │
    └─────────────────┴──────────────┴───────────────────┘
    
    💡 При каждом вызове /deals данные ОБНОВЛЯЮТСЯ
    💡 INSERT OR REPLACE - если игра уже есть, обновляется скидка

┌─────────────────────────────────────────────────────────────────┐
│              ⏰ 3. АВТОМАТИЧЕСКИЙ ПЛАНИРОВЩИК                   │
└─────────────────────────────────────────────────────────────────┘
    
    🕐 Запуск: start_scheduler() при старте бота
    ↓
    🗓️ Расписание: каждое ВОСКРЕСЕНЬЕ в 18:00 (МСК)
    ↓
    📅 Команда: schedule.every().sunday.at("18:00").do(run_weekly_digest)
    ↓
    🔄 Проверка: каждую минуту schedule.run_pending()
    ↓
    🧵 Выполнение: в отдельном потоке (daemon thread)

┌─────────────────────────────────────────────────────────────────┐
│                📨 4. МАССОВАЯ ОТПРАВКА                          │
└─────────────────────────────────────────────────────────────────┘
    
    🎯 Получатели: все подписанные пользователи (db.get_subscribed_users())
    ↓
    🌐 Для каждого пользователя:
        ├── Определяется язык (ru/en)
        ├── Формируется персональное сообщение
        ├── Добавляются ТОП-5 игр с эмодзи (🥇🥈🥉4️⃣5️⃣)
        └── Отправляется через Telegram API
    ↓
    📊 Статистика: подсчет успешных/неудачных отправок
    ↓
    🧹 Очистка: данные из weekly_top удаляются для новой недели

┌─────────────────────────────────────────────────────────────────┐
│                  👤 5. РУЧНЫЕ КОМАНДЫ                           │
└─────────────────────────────────────────────────────────────────┘
    
    /weeklydigest - показать текущий дайджест конкретному пользователю
    /test_digest - просмотр данных (только админ)
    /send_digest - принудительная отправка всем (только админ)

┌─────────────────────────────────────────────────────────────────┐
│                🌐 6. МНОГОЯЗЫЧНОСТЬ                             │
└─────────────────────────────────────────────────────────────────┘
    
    🇷🇺 Русский пользователь получает:
        📝 "📊 Еженедельный дайджест лучших скидок"
        💸 "Скидка: -85%"
        💰 "Цена: 399₽"
    
    🇺🇸 English пользователь получает:
        📝 "📊 Weekly Digest of Best Deals"
        💸 "Discount: -85%"
        💰 "Price: $15.99"

┌─────────────────────────────────────────────────────────────────┐
│                ⚙️ 7. ТЕХНИЧЕСКИЕ ДЕТАЛИ                        │
└─────────────────────────────────────────────────────────────────┘
    
    📦 Библиотеки:
        - schedule: для планирования задач
        - threading: для работы в фоне
        - asyncio: для асинхронных операций
        - sqlite3: для хранения данных
    
    🔧 Обработка ошибок:
        - Логирование всех операций
        - Try-catch блоки везде
        - Продолжение работы при сбоях
    
    🚀 Производительность:
        - Задержка 0.1с между отправками (избежание rate limit)
        - Daemon thread (не блокирует основную работу)
        - Автоматическая очистка данных

┌─────────────────────────────────────────────────────────────────┐
│                   📊 ПРИМЕР РАБОТЫ                              │
└─────────────────────────────────────────────────────────────────┘
    
    📅 Понедельник: пользователи запускают /deals → данные собираются
    📅 Вторник-Суббота: данные накапливаются и обновляются
    📅 Воскресенье 18:00: автоматическая отправка дайджеста
    📅 После отправки: данные очищаются, цикл начинается заново

ИТОГ: 🎯 Полностью автоматизированная система еженедельных дайджестов
      с многоязычной поддержкой и административными функциями!
"""

print(__doc__)
