#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–≥—Ä
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from steam_library import get_steam_library, get_recently_played_games
from ai_game_recommendations import get_ai_game_recommendations
from steam_wishlist import SteamWishlistParser
from config import OPENROUTER_API_KEY

async def test_library_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–≥—Ä"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–≥—Ä Steam...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π Steam
    test_profiles = [
        "https://steamcommunity.com/id/gabelogannewell",  # –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Steam
        "https://steamcommunity.com/profiles/76561197960287930",  # –î—Ä—É–≥–æ–π –ø—Ä–∏–º–µ—Ä
    ]
    
    for profile_url in test_profiles:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile_url}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä
            library = await get_steam_library(profile_url, limit=10)
            
            if library:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(library)} –∏–≥—Ä –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:")
                
                for i, game in enumerate(library[:5], 1):
                    name = game.get('name', 'Unknown')
                    playtime = game.get('playtime_forever', 0)
                    hours = playtime / 60 if playtime > 0 else 0
                    
                    print(f"   {i}. {name} ({hours:.1f} —á–∞—Å–æ–≤)")
                
                if len(library) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(library) - 5} –∏–≥—Ä")
                    
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É (–ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {profile_url}: {e}")

async def test_comprehensive_ai_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_wishlist = [
        {'name': 'The Witcher 3: Wild Hunt'},
        {'name': 'Cyberpunk 2077'},
        {'name': 'Red Dead Redemption 2'},
        {'name': 'Baldur\'s Gate 3'},
        {'name': 'Disco Elysium'},
    ]
    
    test_library = [
        {'name': 'Skyrim', 'playtime_forever': 12000},  # 200 —á–∞—Å–æ–≤
        {'name': 'Fallout 4', 'playtime_forever': 6000},  # 100 —á–∞—Å–æ–≤
        {'name': 'Mass Effect 2', 'playtime_forever': 3600},  # 60 —á–∞—Å–æ–≤
        {'name': 'Dragon Age: Origins', 'playtime_forever': 1800},  # 30 —á–∞—Å–æ–≤
        {'name': 'Divinity: Original Sin 2', 'playtime_forever': 4800},  # 80 —á–∞—Å–æ–≤
    ]
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   üíù Wishlist: {len(test_wishlist)} –∏–≥—Ä")
    print(f"   üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {len(test_library)} –∏–≥—Ä")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        ai_result = await get_ai_game_recommendations(
            test_wishlist, 
            test_library, 
            OPENROUTER_API_KEY, 
            6
        )
        
        if ai_result['success']:
            print(f"\n‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
            analysis = ai_result.get('analysis', {})
            if analysis:
                print(f"\nüß† –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:")
                
                if 'top_genres' in analysis:
                    print(f"   üéÆ –ñ–∞–Ω—Ä—ã: {', '.join(analysis['top_genres'][:3])}")
                
                if 'preferred_mechanics' in analysis:
                    print(f"   ‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∫–∏: {', '.join(analysis['preferred_mechanics'][:3])}")
                
                if 'gaming_style' in analysis:
                    print(f"   üéØ –°—Ç–∏–ª—å: {analysis['gaming_style']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = ai_result.get('recommendations', [])
            if recommendations:
                print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}):")
                
                for i, rec in enumerate(recommendations[:4], 1):
                    name = rec.get('name', 'Unknown')
                    reason = rec.get('reason', 'No reason')[:80]
                    similarity = rec.get('similarity_score', 0)
                    
                    print(f"   {i}. {name} ({similarity}%)")
                    print(f"      üí° {reason}")
                    
            else:
                print("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                
        else:
            error = ai_result.get('error', 'Unknown error')
            print(f"‚ùå –ò–ò-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {error}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ò–ò: {e}")

async def test_real_profile():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)"""
    print("\nüîç –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º Steam...")
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ)
    test_profiles = [
        "https://steamcommunity.com/id/gabelogannewell",  # –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Steam
    ]
    
    for profile_url in test_profiles:
        print(f"\nüîó –¢–µ—Å—Ç–∏—Ä—É—é: {profile_url}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º wishlist
            wishlist_games = []
            try:
                async with SteamWishlistParser() as parser:
                    steam_id = parser.extract_steam_id(profile_url)
                    if steam_id:
                        steam_id64 = await parser.resolve_steam_id(steam_id)
                        if steam_id64:
                            wishlist_games = await parser.get_wishlist_data(steam_id64)
                            
                print(f"üíù Wishlist: {len(wishlist_games)} –∏–≥—Ä")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å wishlist: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            owned_games = []
            try:
                owned_games = await get_steam_library(profile_url, limit=20)
                print(f"üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {len(owned_games)} –∏–≥—Ä")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            total_games = len(wishlist_games) + len(owned_games)
            if total_games >= 3:
                print(f"üìä –í—Å–µ–≥–æ –∏–≥—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {total_games}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                ai_result = await get_ai_game_recommendations(
                    wishlist_games[:10],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
                    owned_games[:15], 
                    OPENROUTER_API_KEY, 
                    4
                )
                
                if ai_result['success']:
                    print("‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    
                    recommendations = ai_result.get('recommendations', [])
                    if recommendations:
                        print(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
                        for i, rec in enumerate(recommendations[:3], 1):
                            print(f"   {i}. {rec.get('name', 'Unknown')}")
                else:
                    print(f"‚ùå –ò–ò-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {ai_result.get('error', 'Unknown')}")
            else:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({total_games} –∏–≥—Ä)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∏–≥—Ä")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not OPENROUTER_API_KEY or OPENROUTER_API_KEY == "your-api-key-here":
        print("‚ùå API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ OPENROUTER_API_KEY –≤ config.py")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {OPENROUTER_API_KEY[:10]}...")
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–≥—Ä
    await test_library_parser()
    
    # –¢–µ—Å—Ç 2: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await test_comprehensive_ai_recommendations()
    
    # –¢–µ—Å—Ç 3: –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await test_real_profile()
    
    print("\n" + "=" * 80)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–≥—Ä Steam")
    print("   ‚úÖ –£—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö")
    print("   ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
    print("   ‚úÖ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã")

if __name__ == "__main__":
    asyncio.run(main())
