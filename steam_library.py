"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∏–≥—Ä Steam
–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
"""
import aiohttp
import asyncio
import re
import json
import logging
from typing import List, Dict, Optional
from bs4 import BeautifulSoup

logger = logging.getLogger(__name__)

class SteamLibraryParser:
    def __init__(self):
        self.session = None
        
    async def __aenter__(self):
        timeout = aiohttp.ClientTimeout(total=60, connect=15)
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
        }
        self.session = aiohttp.ClientSession(timeout=timeout, headers=headers)
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    def extract_steam_id(self, profile_url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Steam ID –∏–∑ URL –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            patterns = [
                r'steamcommunity\.com/id/([^/]+)',
                r'steamcommunity\.com/profiles/(\d+)',
            ]
            
            for pattern in patterns:
                match = re.search(pattern, profile_url)
                if match:
                    return match.group(1)
            
            return None
        except Exception as e:
            logger.error(f"Error extracting Steam ID: {e}")
            return None
    
    async def resolve_steam_id(self, identifier: str) -> Optional[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π URL –≤ Steam ID64"""
        try:
            if identifier.isdigit() and len(identifier) == 17:
                return identifier
                
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å Steam ID64 —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
            profile_url = f"https://steamcommunity.com/id/{identifier}"
            
            async with self.session.get(profile_url) as response:
                if response.status == 200:
                    content = await response.text()
                    
                    # –ò—â–µ–º Steam ID64 –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    steam_id_match = re.search(r'"steamid":"(\d{17})"', content)
                    if steam_id_match:
                        return steam_id_match.group(1)
                    
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                    steam_id_match = re.search(r'g_steamID = "(\d{17})";', content)
                    if steam_id_match:
                        return steam_id_match.group(1)
                        
                    # –ò—â–µ–º –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
                    steam_id_match = re.search(r'data-steamid="(\d{17})"', content)
                    if steam_id_match:
                        return steam_id_match.group(1)
            
            logger.error(f"Could not resolve Steam ID for: {identifier}")
            return None
            
        except Exception as e:
            logger.error(f"Error resolving Steam ID: {e}")
            return None
    
    async def check_library_accessibility(self, steam_id64: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–≥—Ä"""
        try:
            games_url = f"https://steamcommunity.com/profiles/{steam_id64}/games/?tab=all"
            
            async with self.session.get(games_url) as response:
                if response.status == 200:
                    content = await response.text()
                    
                    if 'This profile is private' in content:
                        logger.error(f"‚ùå Profile is private for Steam ID64: {steam_id64}")
                        return False
                    elif 'The specified profile could not be found' in content:
                        logger.error(f"‚ùå Profile not found for Steam ID64: {steam_id64}")
                        return False
                    elif 'This user has not yet set up their Steam Community profile' in content:
                        logger.error(f"‚ùå Profile not set up for Steam ID64: {steam_id64}")
                        return False
                    elif 'game_name' in content or 'gameListRow' in content:
                        logger.info(f"‚úÖ Game library accessible for Steam ID64: {steam_id64}")
                        return True
                    elif 'no games' in content.lower() or 'This user has no games' in content:
                        logger.info(f"üìã Game library is empty for Steam ID64: {steam_id64}")
                        return True  # –î–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—É—Å—Ç–æ–π
                    else:
                        logger.warning(f"‚ö†Ô∏è Unexpected games page content for Steam ID64: {steam_id64}")
                        return True  # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        
                elif response.status in [403, 401]:
                    logger.error(f"‚ùå Access denied to game library for Steam ID64: {steam_id64}")
                    return False
                elif response.status == 404:
                    logger.error(f"‚ùå Games page not found for Steam ID64: {steam_id64}")
                    return False
                else:
                    logger.error(f"‚ùå HTTP {response.status} when accessing games for Steam ID64: {steam_id64}")
                    return False
                    
        except Exception as e:
            logger.error(f"Error checking library accessibility: {e}")
            return False
    
    async def get_owned_games(self, steam_id64: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"Getting owned games for Steam ID64: {steam_id64}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not await self.check_library_accessibility(steam_id64):
                return []
            
            games = []
            
            # –ú–µ—Ç–æ–¥ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö –∏–≥—Ä
            games_data = await self._parse_games_page(steam_id64)
            if games_data:
                games.extend(games_data)
            
            # –ï—Å–ª–∏ –º–∞–ª–æ –∏–≥—Ä, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            if len(games) < 10:
                # –ú–µ—Ç–æ–¥ 2: –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ AJAX
                ajax_games = await self._parse_games_ajax(steam_id64)
                if ajax_games:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    existing_ids = {g.get('appid') for g in games}
                    for game in ajax_games:
                        if game.get('appid') not in existing_ids:
                            games.append(game)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
            games = sorted(games, key=lambda x: x.get('playtime_forever', 0), reverse=True)
            
            logger.info(f"Found {len(games)} games for Steam ID64: {steam_id64}")
            return games[:limit]
            
        except Exception as e:
            logger.error(f"Error getting owned games: {e}")
            return []
    
    async def _parse_games_page(self, steam_id64: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–≥—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            games_url = f"https://steamcommunity.com/profiles/{steam_id64}/games/?tab=all"
            
            async with self.session.get(games_url) as response:
                if response.status != 200:
                    return []
                
                content = await response.text()
                games = []
                
                # –ò—â–µ–º JavaScript –¥–∞–Ω–Ω—ã–µ —Å –∏–≥—Ä–∞–º–∏
                script_match = re.search(r'var rgGames = (\[.*?\]);', content, re.DOTALL)
                if script_match:
                    try:
                        games_json = script_match.group(1)
                        games_data = json.loads(games_json)
                        
                        for game in games_data:
                            if isinstance(game, dict):
                                game_info = {
                                    'appid': game.get('appid'),
                                    'name': game.get('name', '').strip(),
                                    'playtime_forever': game.get('hours_forever', '0').replace(',', ''),
                                    'playtime_2weeks': game.get('hours', '0').replace(',', ''),
                                    'img_icon_url': game.get('logo', ''),
                                    'has_community_visible_stats': True
                                }
                                
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã
                                try:
                                    playtime_str = str(game_info['playtime_forever']).replace(',', '')
                                    if playtime_str and playtime_str != '0':
                                        # –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ —á–∞—Å–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
                                        game_info['playtime_forever'] = int(float(playtime_str) * 60)
                                    else:
                                        game_info['playtime_forever'] = 0
                                except:
                                    game_info['playtime_forever'] = 0
                                
                                if game_info['name']:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                                    games.append(game_info)
                        
                        return games
                    except json.JSONDecodeError as e:
                        logger.error(f"Error parsing games JSON: {e}")
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø–∞—Ä—Å–∏–Ω–≥ HTML
                soup = BeautifulSoup(content, 'html.parser')
                game_rows = soup.find_all('div', class_='gameListRow')
                
                for row in game_rows:
                    try:
                        name_elem = row.find('div', class_='gameListRowItemName')
                        if name_elem:
                            name = name_elem.get_text(strip=True)
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º app ID –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                            app_id = None
                            link = row.find('a')
                            if link and 'href' in link.attrs:
                                app_match = re.search(r'/app/(\d+)', link['href'])
                                if app_match:
                                    app_id = int(app_match.group(1))
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
                            hours_elem = row.find('div', class_='gameListRowHours')
                            playtime = 0
                            if hours_elem:
                                hours_text = hours_elem.get_text(strip=True)
                                hours_match = re.search(r'([\d,\.]+)', hours_text.replace(',', ''))
                                if hours_match:
                                    try:
                                        playtime = int(float(hours_match.group(1)) * 60)  # –í –º–∏–Ω—É—Ç—ã
                                    except:
                                        playtime = 0
                            
                            if name and app_id:
                                games.append({
                                    'appid': app_id,
                                    'name': name,
                                    'playtime_forever': playtime,
                                    'playtime_2weeks': 0,
                                    'img_icon_url': '',
                                    'has_community_visible_stats': True
                                })
                    except Exception as e:
                        logger.error(f"Error parsing game row: {e}")
                        continue
                
                return games
                
        except Exception as e:
            logger.error(f"Error parsing games page: {e}")
            return []
    
    async def _parse_games_ajax(self, steam_id64: str) -> List[Dict]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—ã —á–µ—Ä–µ–∑ AJAX –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ AJAX endpoints Steam
            ajax_urls = [
                f"https://steamcommunity.com/profiles/{steam_id64}/games/?tab=all&xml=1",
                f"https://steamcommunity.com/profiles/{steam_id64}/games/?xml=1",
            ]
            
            for url in ajax_urls:
                try:
                    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                    async with self.session.get(url) as response:
                        if response.status == 200:
                            content = await response.text()
                            
                            # –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
                            games = self._parse_games_xml(content)
                            if games:
                                return games
                                
                except Exception as e:
                    logger.debug(f"AJAX method failed for {url}: {e}")
                    continue
            
            return []
            
        except Exception as e:
            logger.error(f"Error in AJAX games parsing: {e}")
            return []
    
    def _parse_games_xml(self, xml_content: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç XML —Å –∏–≥—Ä–∞–º–∏"""
        try:
            soup = BeautifulSoup(xml_content, 'xml')
            games = []
            
            for game in soup.find_all('game'):
                try:
                    app_id = game.find('appID')
                    name = game.find('name')
                    hours = game.find('hoursOnRecord')
                    
                    if app_id and name:
                        playtime = 0
                        if hours and hours.text:
                            try:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ "123.4 hrs"
                                hours_match = re.search(r'([\d\.]+)', hours.text)
                                if hours_match:
                                    playtime = int(float(hours_match.group(1)) * 60)  # –í –º–∏–Ω—É—Ç—ã
                            except:
                                playtime = 0
                        
                        games.append({
                            'appid': int(app_id.text),
                            'name': name.text.strip(),
                            'playtime_forever': playtime,
                            'playtime_2weeks': 0,
                            'img_icon_url': '',
                            'has_community_visible_stats': True
                        })
                except Exception as e:
                    logger.error(f"Error parsing XML game: {e}")
                    continue
            
            return games
            
        except Exception as e:
            logger.error(f"Error parsing games XML: {e}")
            return []

    async def get_recently_played_games(self, steam_id64: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            all_games = await self.get_owned_games(steam_id64, limit * 2)
            
            # –°–Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —Å –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (playtime_2weeks > 0)
            recent_games = [g for g in all_games if g.get('playtime_2weeks', 0) > 0]
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            other_games = [g for g in all_games if g.get('playtime_2weeks', 0) == 0]
            other_games = sorted(other_games, key=lambda x: x.get('playtime_forever', 0), reverse=True)
            
            combined = recent_games + other_games
            return combined[:limit]
            
        except Exception as e:
            logger.error(f"Error getting recently played games: {e}")
            return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
async def get_steam_library(profile_url: str, limit: int = 50) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä Steam –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        profile_url: URL –ø—Ä–æ—Ñ–∏–ª—è Steam
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–∞—Ö
    """
    async with SteamLibraryParser() as parser:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Steam ID
        steam_identifier = parser.extract_steam_id(profile_url)
        if not steam_identifier:
            logger.error("Could not extract Steam ID from URL")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º Steam ID64
        steam_id64 = await parser.resolve_steam_id(steam_identifier)
        if not steam_id64:
            logger.error("Could not resolve Steam ID64")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã
        games = await parser.get_owned_games(steam_id64, limit)
        return games


async def get_recently_played_games(profile_url: str, limit: int = 20) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        profile_url: URL –ø—Ä–æ—Ñ–∏–ª—è Steam
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–∞—Ö
    """
    async with SteamLibraryParser() as parser:
        steam_identifier = parser.extract_steam_id(profile_url)
        if not steam_identifier:
            return []
        
        steam_id64 = await parser.resolve_steam_id(steam_identifier)
        if not steam_id64:
            return []
        
        games = await parser.get_recently_played_games(steam_id64, limit)
        return games


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def test():
        profile_url = "https://steamcommunity.com/id/example"
        
        print("Getting library...")
        library = await get_steam_library(profile_url, 20)
        
        print(f"Found {len(library)} games:")
        for game in library[:5]:
            hours = game.get('playtime_forever', 0) / 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã
            print(f"- {game.get('name', 'Unknown')} ({hours:.1f} hours)")
    
    # asyncio.run(test())
