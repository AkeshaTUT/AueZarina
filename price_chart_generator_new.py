"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏–≥—Ä
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç matplotlib –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
"""
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import numpy as np
import io
import random
import aiohttp
import asyncio
import logging
import re
from typing import List, Dict, Optional, Tuple

logger = logging.getLogger(__name__)

def extract_game_id_from_url(url: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç game_id –∏–∑ Steam URL
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - https://store.steampowered.com/app/1091500/Cyberpunk_2077/
    - https://steamcommunity.com/app/1091500
    - steam://store/1091500
    
    Args:
        url: Steam URL
        
    Returns:
        game_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ Steam URL
        patterns = [
            r'store\.steampowered\.com/app/(\d+)',  # Store page
            r'steamcommunity\.com/app/(\d+)',       # Community page  
            r'steam://store/(\d+)',                 # Steam protocol
            r'/app/(\d+)',                          # –õ—é–±–æ–π URL —Å /app/ID
            r'(?:^|\D)(\d{6,7})(?:\D|$)'           # –ü—Ä–æ—Å—Ç–æ ID –∏–∑ 6-7 —Ü–∏—Ñ—Ä
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                game_id = match.group(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è Steam
                if len(game_id) >= 3 and int(game_id) > 0:
                    logger.info(f"üìã Extracted game_id: {game_id} from URL: {url}")
                    return game_id
        
        logger.warning(f"üîç Could not extract game_id from URL: {url}")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Error extracting game_id from URL: {e}")
        return None

class PriceChartGenerator:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams['font.family'] = ['DejaVu Sans', 'Liberation Sans', 'Arial']
        plt.rcParams['axes.unicode_minus'] = False
        
    def generate_sample_price_data(self, game_name: str, months: int = 6) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=months * 30)
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∏–≥—Ä—ã (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
        random.seed(hash(game_name) % 1000)
        base_price = random.randint(500, 3000)
        
        prices = []
        current_date = start_date
        current_price = base_price
        
        while current_date <= end_date:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ —Å–∫–∏–¥–∫—É
                discount = random.uniform(0.2, 0.8)  # –°–∫–∏–¥–∫–∞ 20-80%
                current_price = int(base_price * (1 - discount))
            elif random.random() < 0.05:  # 5% —à–∞–Ω—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω–µ
                current_price = base_price
            
            prices.append({
                'date': current_date,
                'price': current_price,
                'original_price': base_price
            })
            
            current_date += timedelta(days=random.randint(1, 7))
        
        return prices
    
    async def get_real_price_data(self, app_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SteamDB)"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
            # –ù–∞–ø—Ä–∏–º–µ—Ä, SteamDB, IsThereAnyDeal, –∏–ª–∏ SteamSpy
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sample –¥–∞–Ω–Ω—ã–µ
            return None
            
        except Exception as e:
            logger.error(f"Error getting real price data: {e}")
            return None
    
    def create_price_chart(self, game_name: str, price_data: List[Dict]) -> io.BytesIO:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            plt.style.use('default')
            fig, ax = plt.subplots(figsize=(12, 7))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dates = [item['date'] for item in price_data]
            prices = [item['price'] for item in price_data]
            original_prices = [item['original_price'] for item in price_data]
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            ax.plot(dates, prices, linewidth=2.5, color='#1f77b4', label='–¶–µ–Ω–∞')
            
            # –ó–∞–ª–∏–≤–∫–∞ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
            ax.fill_between(dates, prices, alpha=0.3, color='#1f77b4')
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–∫–∏–¥–∫–∏ –∫—Ä–∞—Å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
            discount_dates = []
            discount_prices = []
            for i, (date, price, original) in enumerate(zip(dates, prices, original_prices)):
                if price < original * 0.9:  # –°–∫–∏–¥–∫–∞ –±–æ–ª—å—à–µ 10%
                    discount_dates.append(date)
                    discount_prices.append(price)
            
            if discount_dates:
                ax.scatter(discount_dates, discount_prices, color='red', s=50, zorder=5, label='–°–∫–∏–¥–∫–∏')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
            ax.set_ylabel('–¶–µ–Ω–∞ (‚ÇΩ)', fontsize=12)
            ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {game_name}', fontsize=14, fontweight='bold')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax.xaxis.set_major_locator(mdates.MonthLocator())
            
            # –°–µ—Ç–∫–∞
            ax.grid(True, alpha=0.3)
            ax.legend()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            min_price = min(prices)
            max_price = max(prices)
            current_price = prices[-1]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_text = f'–ú–∏–Ω: {min_price}‚ÇΩ | –ú–∞–∫—Å: {max_price}‚ÇΩ | –¢–µ–∫—É—â–∞—è: {current_price}‚ÇΩ'
            ax.text(0.02, 0.98, stats_text, transform=ax.transAxes, 
                   verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞—Ç
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"Error creating price chart: {e}")
            return None
    
    async def search_game_by_name(self, game_name: str) -> Optional[Dict]:
        """–ò—â–µ—Ç –∏–≥—Ä—É –≤ Steam –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä—ã
            url = f"https://store.steampowered.com/api/storesearch/?term={game_name}&l=russian&cc=RU"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        items = data.get('items', [])
                        
                        if items:
                            game = items[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            return {
                                'id': game.get('id'),
                                'name': game.get('name'),
                                'tiny_image': game.get('tiny_image'),
                                'small_capsule_image': game.get('small_capsule_image')
                            }
            
            return None
            
        except Exception as e:
            logger.error(f"Error searching game by name: {e}")
            return None
    
    async def get_game_info_by_id(self, game_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –ø–æ Steam ID"""
        try:
            logger.info(f"üîç Getting game info for ID: {game_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Steam Store API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
            url = f"https://store.steampowered.com/api/appdetails?appids={game_id}&l=russian&cc=RU"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if game_id in data and data[game_id]['success']:
                            game_data = data[game_id]['data']
                            
                            game_info = {
                                'id': game_id,
                                'name': game_data.get('name', f'Game {game_id}'),
                                'short_description': game_data.get('short_description', ''),
                                'header_image': game_data.get('header_image', ''),
                                'price_overview': game_data.get('price_overview', {}),
                                'genres': [genre.get('description', '') for genre in game_data.get('genres', [])],
                                'release_date': game_data.get('release_date', {}).get('date', '')
                            }
                            
                            logger.info(f"üéÆ Found game: {game_info['name']}")
                            return game_info
                        else:
                            logger.warning(f"‚ö†Ô∏è Game with ID {game_id} not found or not accessible")
                            return None
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting game info by ID {game_id}: {e}")
            return None

async def generate_price_chart(game_input: str) -> Tuple[Optional[io.BytesIO], Optional[Dict]]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω
    
    Args:
        game_input: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ Steam URL
        
    Returns:
        Tuple —Å –±—É—Ñ–µ—Ä–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–µ
    """
    try:
        generator = PriceChartGenerator()
        game_info = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ input URL-–æ–º
        game_id = extract_game_id_from_url(game_input)
        
        if game_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –ø–æ ID
            game_info = await generator.get_game_info_by_id(game_id)
            if not game_info:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é
                game_info = {'name': f'Game {game_id}', 'id': game_id}
        else:
            # –ò—â–µ–º –∏–≥—Ä—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            game_info = await generator.search_game_by_name(game_input)
            if not game_info:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                game_info = {'name': game_input, 'id': None}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        real_data = await generator.get_real_price_data(str(game_info.get('id', '')))
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ
        if not real_data:
            price_data = generator.generate_sample_price_data(game_info['name'])
        else:
            price_data = real_data
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_buffer = generator.create_price_chart(game_info['name'], price_data)
        
        return chart_buffer, game_info
        
    except Exception as e:
        logger.error(f"Error generating price chart: {e}")
        return None, None
