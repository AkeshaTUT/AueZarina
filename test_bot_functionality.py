#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Steam Discount Bot v2.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö 5 –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import DatabaseManager
from steam_scraper import SteamScraper
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_database_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = DatabaseManager()
    
    # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 12345
    db.add_user(user_id, "test_user", "Test", "User")
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂–∞–Ω—Ä–æ–≤
    genres = ["–≠–∫—à–µ–Ω", "–†–ü–ì", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è"]
    db.set_user_genres(user_id, genres)
    user_genres = db.get_user_genres(user_id)
    print(f"‚úÖ –ñ–∞–Ω—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {user_genres}")
    
    # –¢–µ—Å—Ç 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–∏–¥–∫–∏
    db.set_user_min_discount(user_id, 50)
    min_discount = db.get_user_min_discount(user_id)
    print(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {min_discount}%")
    
    # –¢–µ—Å—Ç 4: –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
    db.add_price_history(123456, "Test Game", 1000.0)
    price_history = db.get_price_history(123456)
    print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: {len(price_history)} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç 5: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã
    free_games = db.get_free_games()
    print(f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã: {len(free_games)} –∏–≥—Ä")
    
    # –¢–µ—Å—Ç 6: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø
    db.add_weekly_top_game("Test Game", 75, 500.0)
    weekly_top = db.get_weekly_top_games()
    print(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø: {len(weekly_top)} –∏–≥—Ä")
    
    print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True

async def test_scraper_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–∞—Ä—Å–µ—Ä–∞ Steam"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ Steam...")
    
    try:
        scraper = SteamScraper()
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        games = await scraper.get_discounted_games(min_discount=30, max_results=5)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(games)} –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–∞–º–∏")
        
        for i, game in enumerate(games[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"  {i+1}. {game.get('title', 'Unknown')} - {game.get('discount', 0)}% —Å–∫–∏–¥–∫–∞")
            if game.get('genres'):
                print(f"     –ñ–∞–Ω—Ä—ã: {', '.join(game['genres'][:3])}")
            if game.get('app_id'):
                print(f"     App ID: {game['app_id']}")
        
        return len(games) > 0
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é): {e}")
        return False

def test_filter_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏–≥—Ä"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_games = [
        {"title": "Action Game", "discount": 40, "genres": ["–≠–∫—à–µ–Ω", "–®—É—Ç–µ—Ä"]},
        {"title": "RPG Game", "discount": 60, "genres": ["–†–ü–ì", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"]},
        {"title": "Strategy Game", "discount": 25, "genres": ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è"]},
        {"title": "Indie Game", "discount": 80, "genres": ["–ò–Ω–¥–∏", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä"]},
    ]
    
    # –≠–º—É–ª—è—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    user_genres = ["–≠–∫—à–µ–Ω", "–†–ü–ì"]
    min_discount = 35
    
    filtered_games = []
    for game in test_games:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∏–¥–∫—É
        if game["discount"] < min_discount:
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∞–Ω—Ä—ã
        if user_genres and not any(genre in user_genres for genre in game["genres"]):
            continue
        filtered_games.append(game)
    
    print(f"‚úÖ –ò–∑ {len(test_games)} –∏–≥—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_games)}")
    for game in filtered_games:
        print(f"  - {game['title']}: {game['discount']}% ({', '.join(game['genres'])})")
    
    return len(filtered_games) > 0

def test_inline_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    # –¢–µ—Å—Ç –∂–∞–Ω—Ä–æ–≤
    available_genres = ["–≠–∫—à–µ–Ω", "–†–ü–ì", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–°–∏–º—É–ª—è—Ç–æ—Ä", "–ò–Ω–¥–∏"]
    selected_genres = ["–≠–∫—à–µ–Ω", "–†–ü–ì"]
    
    keyboard_data = []
    for genre in available_genres:
        status = "‚úÖ" if genre in selected_genres else "‚ùå"
        keyboard_data.append(f"{status} {genre}")
    
    print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–∞–Ω—Ä–æ–≤: {len(keyboard_data)} –∫–Ω–æ–ø–æ–∫")
    print("   –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫:", keyboard_data[:3])
    
    # –¢–µ—Å—Ç —Å–∫–∏–¥–æ–∫
    discount_options = [30, 50, 70, 90]
    current_discount = 50
    
    discount_keyboard = []
    for discount in discount_options:
        status = "üéØ" if discount == current_discount else "üí∞"
        discount_keyboard.append(f"{status} {discount}%")
    
    print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫–∏–¥–æ–∫: {len(discount_keyboard)} –∫–Ω–æ–ø–æ–∫")
    print("   –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫:", discount_keyboard)
    
    return True

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ Steam Discount Bot v2.0 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
    print("=" * 60)
    
    test_results = {
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": False,
        "–ü–∞—Ä—Å–µ—Ä Steam": False,
        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è": False,
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã": False
    }
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        test_results["–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"] = await test_database_functionality()
        test_results["–ü–∞—Ä—Å–µ—Ä Steam"] = await test_scraper_functionality()
        test_results["–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è"] = test_filter_functionality()
        test_results["–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã"] = test_inline_keyboards()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    all_passed = True
    for test_name, result in test_results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name:.<20} {status}")
        if not result:
            all_passed = False
    
    print("=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüì± –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python steam_bot.py")
        print("\nüîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("   ‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        print("   ‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print("   ‚úÖ –ù–µ—Ç –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
