import asyncio
import json
import logging
import os
from datetime import datetime, timedelta
from typing import List
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import schedule
import time
import threading
from steam_scraper import SteamScraper
from database import DatabaseManager
from steam_wishlist import get_wishlist_discounts
from steam_library import get_steam_library, get_recently_played_games
from ai_recommendations import get_game_recommendations
from ai_game_recommendations import get_ai_game_recommendations
from config import OPENROUTER_API_KEY, AI_RECOMMENDATIONS_ENABLED, AI_MAX_RECOMMENDATIONS
from translations import get_text, get_available_languages
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SteamDiscountBot:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
        self.application = Application.builder().token(bot_token).build()
        self.db = DatabaseManager()
        self.scraper = SteamScraper()
        
        # –ñ–∞–Ω—Ä—ã Steam
        self.available_genres = [
            "Action", "Adventure", "Casual", "Indie", "Massively Multiplayer",
            "Racing", "RPG", "Simulation", "Sports", "Strategy", 
            "Early Access", "Free to Play", "Horror", "Puzzle"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        self.application.add_handler(CommandHandler("deals", self.deals_command))
        self.application.add_handler(CommandHandler("genres", self.genres_command))
        self.application.add_handler(CommandHandler("free", self.free_games_command))
        self.application.add_handler(CommandHandler("discount", self.discount_settings_command))
        self.application.add_handler(CommandHandler("settings", self.user_settings_command))
        self.application.add_handler(CommandHandler("weeklydigest", self.weeklydigest_command))
        self.application.add_handler(CommandHandler("feedback", self.feedback_command))
        
        # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.application.add_handler(CommandHandler("wishlist", self.wishlist_command))
        self.application.add_handler(CommandHandler("recommend", self.ai_recommendations_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.application.add_handler(CommandHandler("test_digest", self.test_weekly_digest_command))
        self.application.add_handler(CommandHandler("send_digest", self.admin_send_digest_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å—ã –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
        self.application.add_handler(CommandHandler("rekomend", self.ai_recommendations_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        from telegram.ext import MessageHandler, filters
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_text_messages_conditionally
        ))
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        self.user_states = {}
        self.user_state_timestamps = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä
        self.init_sample_data()
        
    def init_sample_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä
        sample_free_games = [
            {
                'title': 'Epic Games Store - Control',
                'description': '–°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—à–µ–Ω-—Ç—Ä–∏–ª–ª–µ—Ä —Å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º —Å—é–∂–µ—Ç–æ–º',
                'platform': 'Epic Games',
                'url': 'https://store.epicgames.com/en-US/p/control',
                'end_date': '2025-08-02',
                'image_url': 'https://cdn1.epicgames.com/offer/870a3f6935d84ed8a8ad7c12e8b03a2c/EGS_Control_RemedyEntertainment_S1_2560x1440-61c3a5fcf5becd21e8c5696c40e0bafe'
            },
            {
                'title': 'Steam - Counter-Strike 2',
                'description': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —à—É—Ç–µ—Ä–∞',
                'platform': 'Steam',
                'url': 'https://store.steampowered.com/app/730/CounterStrike_2/',
                'end_date': '–ù–∞–≤—Å–µ–≥–¥–∞',
                'image_url': 'https://cdn.akamai.steamstatic.com/steam/apps/730/header.jpg'
            },
            {
                'title': 'GOG - Cyberpunk 2077 DLC',
                'description': '–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–∏–±–µ—Ä–ø–∞–Ω–∫-RPG (—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞)',
                'platform': 'GOG',
                'url': 'https://www.gog.com/game/cyberpunk_2077',
                'end_date': '2025-07-30',
                'image_url': 'https://images.gog-statics.com/8e52d66fe0b56d5de96346b64b6ca95a25c1f9eb8c1fb28c58e3eb23f8b5c34c.jpg'
            }
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        existing_games = self.db.get_active_free_games()
        if not existing_games:
            for game in sample_free_games:
                self.db.add_free_game(**game)
    
    def set_user_state(self, user_id: int, state: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        import time
        self.user_states[user_id] = state
        self.user_state_timestamps[user_id] = time.time()
    
    def clear_user_state(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_states:
            del self.user_states[user_id]
        if user_id in self.user_state_timestamps:
            del self.user_state_timestamps[user_id]
    
    def cleanup_expired_states(self):
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)"""
        import time
        current_time = time.time()
        expired_users = []
        
        for user_id, timestamp in self.user_state_timestamps.items():
            if current_time - timestamp > 600:  # 10 –º–∏–Ω—É—Ç
                expired_users.append(user_id)
        
        for user_id in expired_users:
            self.clear_user_state(user_id)
    
    def load_subscribers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        pass
        
    def save_subscribers(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        pass
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name, user.last_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–∑—ã–∫
        user_language = self.db.get_user_language(user.id)
        
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        if not user_language or user_language == 'ru':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
            keyboard = [
                [
                    InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                    InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                get_text('ru', 'choose_language'),
                reply_markup=reply_markup
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
            await self.show_welcome_message(update, user_language)
    
    async def show_welcome_message(self, update: Update, language: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        welcome_message = f"""
{get_text(language, 'welcome_title')} 

{get_text(language, 'welcome_description')}

{get_text(language, 'main_features')}
{get_text(language, 'genre_filter')}
{get_text(language, 'free_games')}
{get_text(language, 'price_history')}
{get_text(language, 'personal_settings')}
{get_text(language, 'weekly_digest')}

{get_text(language, 'new_features')}
{get_text(language, 'wishlist_analysis')}
{get_text(language, 'ai_recommendations')}

{get_text(language, 'basic_commands')}
{get_text(language, 'cmd_subscribe')}
{get_text(language, 'cmd_deals')}
{get_text(language, 'cmd_genres')}
{get_text(language, 'cmd_free')}
{get_text(language, 'cmd_discount')}
{get_text(language, 'cmd_settings')}

{get_text(language, 'new_commands')}
{get_text(language, 'cmd_wishlist')}
{get_text(language, 'cmd_recommend')}
{get_text(language, 'cmd_help')}

{get_text(language, 'auto_notifications')}
        """
        await update.message.reply_text(welcome_message, parse_mode='HTML')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        language = self.db.get_user_language(user_id)
        
        help_message = f"""
{get_text(language, 'all_commands')}

{get_text(language, 'basic_title')}
{get_text(language, 'start_desc')}
{get_text(language, 'subscribe_desc')}
{get_text(language, 'unsubscribe_desc')}
{get_text(language, 'deals_desc')}
{get_text(language, 'free_desc')}
{get_text(language, 'genres_desc')}
{get_text(language, 'discount_desc')}
{get_text(language, 'settings_desc')}
{get_text(language, 'weeklydigest_desc')}
{get_text(language, 'feedback_desc')}

{get_text(language, 'new_title')}
{get_text(language, 'wishlist_desc')}
{get_text(language, 'recommend_desc')}

{get_text(language, 'help_footer')}
        """
        await update.message.reply_text(help_message, parse_mode='HTML')
    
    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
        user_id = update.effective_user.id
        user = update.effective_user
        language = self.db.get_user_language(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        self.db.add_user(user_id, user.username, user.first_name, user.last_name)
        
        if self.db.subscribe_user(user_id):
            response = get_text(language, 'subscribed_success')
            await update.message.reply_text(response)
        else:
            await update.message.reply_text(get_text(language, 'already_subscribed'))
    
    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
        user_id = update.effective_user.id
        language = self.db.get_user_language(user_id)
        
        if self.db.unsubscribe_user(user_id):
            await update.message.reply_text(get_text(language, 'unsubscribed_success'))
        else:
            await update.message.reply_text(get_text(language, 'not_subscribed'))
    
    async def genres_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /genres - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∂–∞–Ω—Ä–æ–≤"""
        user_id = update.effective_user.id
        user = update.effective_user
        language = self.db.get_user_language(user_id)
        self.db.add_user(user_id, user.username, user.first_name, user.last_name)
        
        current_genres = self.db.get_user_genres(user_id)
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏
        keyboard = []
        for i in range(0, len(self.available_genres), 2):
            row = []
            for j in range(2):
                if i + j < len(self.available_genres):
                    genre = self.available_genres[i + j]
                    # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã
                    prefix = "‚úÖ " if genre in current_genres else ""
                    row.append(InlineKeyboardButton(
                        f"{prefix}{genre}", 
                        callback_data=f"genre_{genre}"
                    ))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(get_text(language, 'clear_all_genres'), callback_data="genre_clear"),
            InlineKeyboardButton(get_text(language, 'save_genres'), callback_data="genre_save")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = get_text(language, 'select_genres_title')
        if current_genres:
            message += get_text(language, 'selected_genres', genres=', '.join(current_genres))
        else:
            message += get_text(language, 'all_genres_selected')
        message += get_text(language, 'genres_instruction')
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def free_games_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /free - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏"""
        user_id = update.effective_user.id
        user = update.effective_user
        language = self.db.get_user_language(user_id)
        self.db.add_user(user_id, user.username, user.first_name, user.last_name)
        
        await update.message.reply_text(get_text(language, 'searching_free_games'))
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä
            from simple_free_games_parser import get_current_free_games
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            all_games = await get_current_free_games()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏
            await self._update_database_with_live_games(all_games)
            
            if not all_games:
                await update.message.reply_text(get_text(language, 'no_free_games'))
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_games = all_games[:10]
            message = f"{get_text(language, 'free_games_title')}\n\n"
            
            for game in display_games:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                platform_emoji = {
                    'Steam': 'üü¶',
                    'Epic Games Store': 'üü™', 
                    'GOG': 'üü´',
                    'Other': '‚ö™'
                }.get(game.get('platform', 'Other'), '‚ö™')
                
                title = game.get('title', 'Unknown Game' if language == 'en' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
                description = game.get('description', 'No description' if language == 'en' else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                end_date = game.get('end_date', 'Unknown' if language == 'en' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                url = game.get('url', '')
                
                message += f"{platform_emoji} <b>{title}</b>\n"
                message += f"üìù {description}\n"
                message += f"üóìÔ∏è {get_text(language, 'game_ends')}{end_date}\n"
                if url:
                    get_game_text = "Get game" if language == 'en' else "–ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É"
                    message += f"üîó <a href='{url}'>{get_game_text}</a>\n"
                message += "\n"
            
            if len(all_games) > 10:
                more_text = f"And {len(all_games) - 10} more giveaways..." if language == 'en' else f"–ò –µ—â–µ {len(all_games) - 10} —Ä–∞–∑–¥–∞—á..."
                message += f"üí° <i>{more_text}</i>\n"
            
            realtime_text = "Data updated in real time" if language == 'en' else "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            message += f"\nüîÑ <i>{realtime_text}</i>"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message) > 4000:
                chunks = self.split_message(message, 4000)
                for chunk in chunks:
                    await update.message.reply_text(chunk, parse_mode='HTML', disable_web_page_preview=True)
            else:
                await update.message.reply_text(message, parse_mode='HTML', disable_web_page_preview=True)
                
        except Exception as e:
            logger.error(f"Error getting free games: {e}")
            await update.message.reply_text(get_text(language, 'error_free_games'))
    
    async def _update_database_with_live_games(self, games: list):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            import sqlite3
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('DELETE FROM free_games WHERE created_at < datetime("now", "-1 day")')
                conn.commit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä—ã
            for game in games:
                try:
                    self.db.add_free_game(
                        title=game.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞'),
                        description=game.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                        platform=game.get('platform', 'Other'),
                        url=game.get('url', ''),
                        end_date=game.get('end_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        image_url=game.get('image_url', '')
                    )
                except Exception as e:
                    logger.error(f"Error adding game to database: {e}")
                    
        except Exception as e:
            logger.error(f"Error updating database with live games: {e}")
    
    async def discount_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /discount - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏"""
        user_id = update.effective_user.id
        user = update.effective_user
        language = self.db.get_user_language(user_id)
        self.db.add_user(user_id, user.username, user.first_name, user.last_name)
        
        current_discount = self.db.get_user_min_discount(user_id)
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–∫–∏–¥–æ–∫
        keyboard = [
            [
                InlineKeyboardButton("30%" + (" ‚úÖ" if current_discount == 30 else ""), callback_data="discount_30"),
                InlineKeyboardButton("50%" + (" ‚úÖ" if current_discount == 50 else ""), callback_data="discount_50")
            ],
            [
                InlineKeyboardButton("70%" + (" ‚úÖ" if current_discount == 70 else ""), callback_data="discount_70"),
                InlineKeyboardButton("90%" + (" ‚úÖ" if current_discount == 90 else ""), callback_data="discount_90")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = get_text(language, 'discount_settings_title')
        message += get_text(language, 'current_discount', discount=current_discount)
        message += get_text(language, 'select_min_discount')
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def user_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings - –ø–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user = update.effective_user
        self.db.add_user(user_id, user.username, user.first_name, user.last_name)
        
        settings = self.db.get_user_settings(user_id)
        language = settings.get('language', 'ru')
        
        subscription_status = get_text(language, 'subscribed') if settings['is_subscribed'] else get_text(language, 'not_subscribed_status')
        genres_text = ', '.join(settings['preferred_genres']) if settings['preferred_genres'] else get_text(language, 'no_genres_selected')
        
        message = f"{get_text(language, 'your_settings')}\n\n"
        message += f"üîî {get_text(language, 'subscription_status')}{subscription_status}\n"
        message += f"üí∞ {get_text(language, 'min_discount_setting')}<b>{settings['min_discount']}%</b>\n"
        message += f"üéÆ {get_text(language, 'selected_genres')}{genres_text}\n"
        message += f"üåç Language: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if language == 'ru' else 'üá∫üá∏ English'}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        keyboard = [
            [InlineKeyboardButton(get_text(language, 'change_language'), callback_data="change_language")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data.startswith("lang_"):
            await self.handle_language_callback(query, user_id, data)
        elif data == "change_language":
            await self.handle_change_language_callback(query, user_id)
        elif data.startswith("genre_"):
            await self.handle_genre_callback(query, user_id, data)
        elif data.startswith("discount_"):
            await self.handle_discount_callback(query, user_id, data)
        elif data.startswith("feedback_"):
            await self.handle_feedback_callback(query, user_id, data)
    
    async def handle_language_callback(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        language = data.replace("lang_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        self.db.set_user_language(user_id, language)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(get_text(language, 'language_changed'))
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        from telegram import Message, Chat, User
        fake_message = Message(
            message_id=0,
            date=None,
            chat=query.message.chat,
            from_user=query.from_user
        )
        fake_update = type('Update', (), {
            'message': fake_message,
            'effective_user': query.from_user
        })()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        await self.show_welcome_message(fake_update, language)
    
    async def handle_change_language_callback(self, query, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        current_language = self.db.get_user_language(user_id)
        
        keyboard = [
            [
                InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")
            ],
            [InlineKeyboardButton(get_text(current_language, 'back_button'), callback_data="back_to_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            get_text(current_language, 'choose_language'),
            reply_markup=reply_markup
        )
    
    async def handle_genre_callback(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∂–∞–Ω—Ä–æ–≤"""
        language = self.db.get_user_language(user_id)
        current_genres = self.db.get_user_genres(user_id)
        
        if data == "genre_clear":
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∂–∞–Ω—Ä—ã
            self.db.set_user_genres(user_id, [])
            if language == 'ru':
                message = "üéÆ <b>–í—Å–µ –∂–∞–Ω—Ä—ã –æ—á–∏—â–µ–Ω—ã!</b>\n\n–¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∏–≥—Ä—ã –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /genres –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            else:
                message = "üéÆ <b>All genres cleared!</b>\n\nNow games of all genres will be shown.\n\nUse /genres for new settings."
            await query.edit_message_text(message, parse_mode='HTML')
            return
        elif data == "genre_save":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            genres_text = ', '.join(current_genres) if current_genres else (
                "–í—Å–µ –∂–∞–Ω—Ä—ã" if language == 'ru' else "All genres"
            )
            if language == 'ru':
                message = f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∂–∞–Ω—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\nüéÆ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã: {genres_text}\n\n–¢–µ–ø–µ—Ä—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤."
            else:
                message = f"‚úÖ <b>Genre settings saved!</b>\n\nüéÆ Selected genres: {genres_text}\n\nNow only games of selected genres will be shown in notifications."
            await query.edit_message_text(message, parse_mode='HTML')
            return
        else:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∂–∞–Ω—Ä
            genre = data.replace("genre_", "")
            if genre in current_genres:
                current_genres.remove(genre)
            else:
                current_genres.append(genre)
            
            self.db.set_user_genres(user_id, current_genres)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for i in range(0, len(self.available_genres), 2):
            row = []
            for j in range(2):
                if i + j < len(self.available_genres):
                    genre = self.available_genres[i + j]
                    prefix = "‚úÖ " if genre in current_genres else ""
                    row.append(InlineKeyboardButton(
                        f"{prefix}{genre}", 
                        callback_data=f"genre_{genre}"
                    ))
            keyboard.append(row)
        
        keyboard.append([
            InlineKeyboardButton(get_text(language, 'clear_all_genres'), callback_data="genre_clear"),
            InlineKeyboardButton(get_text(language, 'save_genres'), callback_data="genre_save")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = get_text(language, 'select_genres_title')
        if current_genres:
            message += get_text(language, 'selected_genres', genres=', '.join(current_genres))
        else:
            message += get_text(language, 'all_genres_selected')
        message += get_text(language, 'genres_instruction')
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    async def handle_discount_callback(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–¥–∫–∏"""
        language = self.db.get_user_language(user_id)
        discount_value = int(data.replace("discount_", ""))
        self.db.set_user_min_discount(user_id, discount_value)
        
        message = get_text(language, 'discount_updated', discount=discount_value)
        if language == 'ru':
            message += f"\n\n–¢–µ–ø–µ—Ä—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –æ—Ç {discount_value}% –∏ –≤—ã—à–µ."
        else:
            message += f"\n\nNow notifications will only include games with discounts of {discount_value}% and higher."
        
        await query.edit_message_text(message, parse_mode='HTML')

    async def handle_feedback_callback(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"""
        language = self.db.get_user_language(user_id)
        user = query.from_user
        username = user.username or user.first_name or str(user_id)
        
        if data == "feedback_bug":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–µ
            self.set_user_state(user_id, "waiting_bug_report")
            message = get_text(language, 'feedback_prompt')
            await query.edit_message_text(message, parse_mode='HTML')
            
        elif data == "feedback_feature":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            self.set_user_state(user_id, "waiting_feature_request")
            message = get_text(language, 'feedback_prompt')
            await query.edit_message_text(message, parse_mode='HTML')
            
        elif data == "feedback_review":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
            self.set_user_state(user_id, "waiting_review")
            message = get_text(language, 'feedback_prompt')
            await query.edit_message_text(message, parse_mode='HTML')
            
        elif data == "feedback_stats":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
            stats = self.db.get_feedback_stats()
            if stats.get('total', 0) > 0:
                message = (
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤**\n\n"
                    f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: **{stats['total']}**\n"
                    f"üêõ –ë–∞–≥–æ–≤: **{stats['bugs']}**\n"
                    f"üí° –ò–¥–µ–π: **{stats['features']}**\n"
                    f"‚ù§Ô∏è –û—Ç–∑—ã–≤–æ–≤: **{stats['compliments']}**\n"
                    f"‚úÖ –†–µ—à–µ–Ω–æ: **{stats['resolved']}**\n"
                )
                if stats.get('avg_rating', 0) > 0:
                    rating_stars = "‚≠ê" * int(stats['avg_rating'])
                    message += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: **{stats['avg_rating']}/5** {rating_stars}"
            else:
                message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤**\n\n–ü–æ–∫–∞ —á—Ç–æ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
                
            await query.edit_message_text(message, parse_mode='Markdown')
    
    async def deals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deals"""
        user_id = update.effective_user.id
        language = self.db.get_user_language(user_id)
        
        await update.message.reply_text(get_text(language, 'searching_deals'))
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
            self.db.add_user(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_genres = self.db.get_user_genres(user_id)
            min_discount = self.db.get_user_min_discount(user_id)
            
            deals = await self.scraper.get_discounted_games()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            filtered_deals = self.filter_deals_by_user_preferences(deals, user_genres, min_discount)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            self.update_weekly_digest_data(deals)
            
            if filtered_deals:
                message = self.format_deals_message(filtered_deals, user_id, language)
                
                # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤
                if len(message) > 4000:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    chunks = self.split_message(message, 4000)
                    for chunk in chunks:
                        await update.message.reply_text(chunk, parse_mode='HTML')
                else:
                    await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text(get_text(language, 'no_suitable_deals', min_discount=min_discount))
        except Exception as e:
            logger.error(f"Error getting deals: {e}")
            await update.message.reply_text(get_text(language, 'error_getting_deals'))
    
    def filter_deals_by_user_preferences(self, deals, user_genres, min_discount):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–≥—Ä—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        if not deals:
            return []
        
        filtered_deals = []
        
        for deal in deals:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É
            discount = deal.get('discount', 0)
            if discount < min_discount:
                continue
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω—ã –∂–∞–Ω—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if user_genres:
                game_genres = deal.get('genres', [])
                if not any(genre in user_genres for genre in game_genres):
                    continue
            
            filtered_deals.append(deal)
        
        return filtered_deals
    
    def format_deals_message(self, deals, user_id: int, language: str = 'ru'):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"""
        if not deals:
            return get_text(language, 'no_suitable_deals', min_discount=30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ
        title_text = "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ Steam" if language == 'ru' else "Current Steam Deals"
        games_text = "–∏–≥—Ä" if language == 'ru' else "games"
        message = f"üéÆ <b>{title_text} ({len(deals)} {games_text})</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –¥–æ 20
        for deal in deals:
            discount = deal.get('discount', 0)
            title = deal.get('title', 'Unknown Game' if language == 'en' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
            url = deal.get('url', '')
            original_price = deal.get('original_price', '')
            discounted_price = deal.get('discounted_price', '')
            game_id = deal.get('app_id', 0)
            
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏
            if discount >= 90:
                emoji = "üî•"
            elif discount >= 70:
                emoji = "‚ö°"
            elif discount >= 50:
                emoji = "üí•"
            else:
                emoji = "üí∞"
            
            message += f"{emoji} <b>{title}</b>\n"
            message += f"üí∏ –°–∫–∏–¥–∫–∞: <b>-{discount}%</b>\n"
            
            if original_price and discounted_price:
                message += f"üí∞ <s>{original_price}</s> ‚Üí <b>{discounted_price}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            price_history = self.db.get_price_history(game_id)
            if price_history:
                lowest_price = min([p['price'] for p in price_history])
                try:
                    current_price = float(discounted_price.replace('‚ÇΩ', '').replace(',', '').strip())
                    if current_price <= lowest_price:
                        message += f"üéØ <b>–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º!</b>\n"
                    else:
                        message += f"üìä –ú–∏–Ω. —Ü–µ–Ω–∞: <b>{lowest_price}‚ÇΩ</b>\n"
                except:
                    pass
            
            if url:
                message += f"üîó <a href='{url}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ Steam</a>\n"
            
            message += "\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
            if game_id and discounted_price:
                try:
                    price = float(discounted_price.replace('‚ÇΩ', '').replace(',', '').strip())
                    self.db.add_price_history(game_id, title, price)
                except:
                    pass
        
        return message
    
    async def weeklydigest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ø-5 –∏–≥—Ä —Å —Å–∞–º—ã–º–∏ –±–æ–ª—å—à–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏"""
        user_id = update.effective_user.id
        language = self.db.get_user_language(user_id)
        
        await update.message.reply_text(get_text(language, 'generating_weekly_digest'))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∏–≥—Ä –∑–∞ –Ω–µ–¥–µ–ª—é
            weekly_top = self.db.get_weekly_top_games()
            
            if weekly_top:
                message = get_text(language, 'weekly_digest_title') + "\n\n"
                message += get_text(language, 'weekly_digest_subtitle') + "\n\n"
                
                for i, game in enumerate(weekly_top[:5], 1):
                    emoji = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i-1]
                    message += f"{emoji} <b>{game['title']}</b>\n"
                    
                    if language == 'ru':
                        message += f"üí∏ –°–∫–∏–¥–∫–∞: <b>-{game['discount']}%</b>\n"
                        message += f"üí∞ –¶–µ–Ω–∞: <b>{game['price']}‚ÇΩ</b>\n\n"
                    else:
                        message += f"ÔøΩ Discount: <b>-{game['discount']}%</b>\n"
                        message += f"üí∞ Price: <b>${game['price']}</b>\n\n"
                
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text(get_text(language, 'no_weekly_data'))
                
        except Exception as e:
            logger.error(f"Error getting weekly digest: {e}")
            await update.message.reply_text(get_text(language, 'error_getting_digest'))
    
    async def send_weekly_digest_to_all(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            users = self.db.get_subscribed_users()
            weekly_top = self.db.get_weekly_top_games()
            
            if not weekly_top:
                logger.info("No weekly data available for digest")
                return
            
            logger.info(f"Sending weekly digest to {len(users)} users")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            sent_count = 0
            failed_count = 0
            
            for user_id in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    language = self.db.get_user_language(user_id)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    message = get_text(language, 'weekly_digest_title') + "\n\n"
                    message += get_text(language, 'weekly_digest_subtitle') + "\n\n"
                    
                    for i, game in enumerate(weekly_top[:5], 1):
                        emoji = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i-1]
                        message += f"{emoji} <b>{game['title']}</b>\n"
                        
                        if language == 'ru':
                            message += f"üí∏ –°–∫–∏–¥–∫–∞: <b>-{game['discount']}%</b>\n"
                            message += f"üí∞ –¶–µ–Ω–∞: <b>{game['price']}‚ÇΩ</b>\n\n"
                        else:
                            message += f"üí∏ Discount: <b>-{game['discount']}%</b>\n"
                            message += f"üí∞ Price: <b>${game['price']}</b>\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
                    message += get_text(language, 'weekly_digest_cta')
                    
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    sent_count += 1
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"Failed to send weekly digest to user {user_id}: {e}")
                    failed_count += 1
            
            logger.info(f"Weekly digest sent: {sent_count} successful, {failed_count} failed")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏
            self.db.clear_weekly_top()
            
        except Exception as e:
            logger.error(f"Error sending weekly digest: {e}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        def schedule_checker():
            logger.info("Weekly digest scheduler thread started")
            while True:
                try:
                    schedule.run_pending()
                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    logger.error(f"Error in scheduler: {e}")
                    time.sleep(60)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 18:00 –ú–°–ö
        def run_weekly_digest():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.send_weekly_digest_to_all())
                loop.close()
            except Exception as e:
                logger.error(f"Error running weekly digest: {e}")
        
        schedule.every().sunday.at("18:00").do(run_weekly_digest)
        
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        # schedule.every(5).minutes.do(run_weekly_digest)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=schedule_checker, daemon=True)
        scheduler_thread.start()
        logger.info("Weekly digest scheduler configured: every Sunday at 18:00 MSK")

    def update_weekly_digest_data(self, deals):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–∫–∏–¥–æ–∫ —Å —É—á–µ—Ç–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"""
        try:
            if not deals:
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            scored_deals = []
            
            for deal in deals:
                title = deal.get('title', '')
                discount = deal.get('discount', 0)
                discounted_price = deal.get('discounted_price', '0')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                try:
                    price_str = str(discounted_price).replace('‚ÇΩ', '').replace('$', '').replace(',', '.').strip()
                    price = float(price_str) if price_str else 0.0
                except (ValueError, AttributeError):
                    price = 0.0
                
                if not title or discount <= 0:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä—ã
                score = self._calculate_game_score(deal)
                
                scored_deals.append({
                    'deal': deal,
                    'title': title,
                    'discount': discount,
                    'price': price,
                    'score': score
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            sorted_deals = sorted(scored_deals, key=lambda x: x['score'], reverse=True)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-15 –∏–≥—Ä —Å –ª—É—á—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            top_deals = sorted_deals[:15]
            
            for scored_deal in top_deals:
                title = scored_deal['title']
                discount = scored_deal['discount']
                price = scored_deal['price']
                score = scored_deal['score']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
                self.db.add_weekly_top_game(title, discount, price, score)
                    
            logger.info(f"Updated weekly digest data with {len(top_deals)} games (algorithm: discount + popularity)")
            
        except Exception as e:
            logger.error(f"Error updating weekly digest data: {e}")
    
    def _calculate_game_score(self, deal):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä—ã –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            discount = deal.get('discount', 0)
            title = deal.get('title', '').lower()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            discounted_price = deal.get('discounted_price', '0')
            try:
                price_str = str(discounted_price).replace('‚ÇΩ', '').replace('$', '').replace(',', '.').strip()
                price = float(price_str) if price_str else 0.0
            except:
                price = 0.0
            
            # 1. –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–∫–∏–¥–∫–∏ (0-100 –±–∞–ª–ª–æ–≤)
            discount_score = min(discount, 90)  # –ú–∞–∫—Å–∏–º—É–º 90 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–∫–∏–¥–∫—É
            
            # 2. –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏–≥—Ä—ã (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥)
            popularity_score = 0
            
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã/—Å–µ—Ä–∏–∏ (–±–æ–Ω—É—Å +30 –±–∞–ª–ª–æ–≤)
            popular_keywords = [
                'cyberpunk', 'witcher', 'gta', 'elder scrolls', 'fallout', 'assassin',
                'call of duty', 'battlefield', 'counter-strike', 'dota', 'steam',
                'fifa', 'tomb raider', 'far cry', 'watch dogs', 'rainbow six',
                'grand theft', 'red dead', 'mass effect', 'dragon age', 'bioshock',
                'borderlands', 'civilization', 'total war', 'mortal kombat', 'tekken',
                'street fighter', 'dark souls', 'elden ring', 'sekiro', 'bloodborne',
                'resident evil', 'silent hill', 'dead space', 'metro', 'stalker',
                'dying light', 'left 4 dead', 'portal', 'half-life', 'team fortress',
                'dishonored', 'prey', 'doom', 'wolfenstein', 'quake', 'unreal',
                'forza', 'need for speed', 'burnout', 'dirt', 'f1', 'wreckfest',
                'xcom', 'cities skylines', 'europa universalis', 'crusader kings',
                'hearts of iron', 'stellaris', 'age of empires', 'starcraft',
                'warcraft', 'world of warcraft', 'overwatch', 'diablo', 'heroes',
                'destiny', 'division', 'ghost recon', 'splinter cell', 'prince',
                'just cause', 'saints row', 'mafia', 'hitman', 'deus ex',
                'batman', 'spider-man', 'mortal kombat', 'injustice', 'marvel',
                'dc comics', 'lego', 'minecraft', 'terraria', 'stardew valley',
                'hollow knight', 'ori and', 'cuphead', 'celeste', 'hades',
                'rocket league', 'fall guys', 'among us', 'valheim', 'rust',
                'pubg', 'fortnite', 'apex legends', 'titanfall', 'warframe'
            ]
            
            for keyword in popular_keywords:
                if keyword in title:
                    popularity_score += 30
                    break  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
            
            # 3. –¶–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–±–∞–ª–∞–Ω—Å —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ)
            price_score = 0
            if 0 < price <= 500:      # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã
                price_score = 25
            elif 500 < price <= 1500: # –°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
                price_score = 20
            elif 1500 < price <= 3000: # –ü—Ä–µ–º–∏—É–º –∏–≥—Ä—ã
                price_score = 15
            else:                     # –û—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏–µ
                price_score = 5
            
            # 4. –ë–æ–Ω—É—Å—ã –∑–∞ –æ—Å–æ–±—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            bonus_score = 0
            
            # –°–≤–µ–∂–∏–µ/–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã (+10 –±–∞–ª–ª–æ–≤)
            trending_keywords = [
                'battle royale', 'survival', 'crafting', 'open world', 'rpg',
                'multiplayer', 'co-op', 'indie', 'early access', 'vr',
                'roguelike', 'metroidvania', 'soulslike', 'tactical', 'strategy'
            ]
            
            game_description = deal.get('description', '').lower()
            full_text = title + ' ' + game_description
            
            for keyword in trending_keywords:
                if keyword in full_text:
                    bonus_score += 5
                    break
            
            # 5. –®—Ç—Ä–∞—Ñ—ã
            penalty = 0
            
            # –®—Ç—Ä–∞—Ñ –∑–∞ DLC/Season Pass (-15 –±–∞–ª–ª–æ–≤)
            dlc_keywords = ['dlc', 'season pass', 'expansion', 'add-on', 'downloadable content']
            for keyword in dlc_keywords:
                if keyword in title:
                    penalty += 15
                    break
            
            # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ –≥–æ–¥—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
            old_years = ['2010', '2011', '2012', '2013', '2014', '2015']
            for year in old_years:
                if year in title:
                    penalty += 10
                    break
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            final_score = discount_score + popularity_score + price_score + bonus_score - penalty
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-200
            final_score = max(0, min(final_score, 200))
            
            logger.debug(f"Game score for '{deal.get('title', '')}': {final_score} "
                        f"(discount: {discount_score}, popularity: {popularity_score}, "
                        f"price: {price_score}, bonus: {bonus_score}, penalty: {penalty})")
            
            return final_score
            
        except Exception as e:
            logger.error(f"Error calculating game score: {e}")
            return deal.get('discount', 0)  # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É

    async def test_weekly_digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
        user_id = update.effective_user.id
        language = self.db.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤)
        admin_ids = [user_id]  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        if user_id not in admin_ids:
            await update.message.reply_text(get_text(language, 'admin_only'))
            return
        
        try:
            weekly_top = self.db.get_weekly_top_games()
            
            if not weekly_top:
                message = get_text(language, 'digest_test_title') + "\n\n" + get_text(language, 'no_digest_data')
            else:
                message = get_text(language, 'digest_test_title') + "\n\n"
                message += get_text(language, 'digest_data_found', count=len(weekly_top)) + "\n\n"
                
                for i, game in enumerate(weekly_top[:10], 1):
                    if language == 'ru':
                        message += f"{i}. <b>{game['title']}</b> - {game['discount']}% (-{game['price']}‚ÇΩ)\n"
                    else:
                        message += f"{i}. <b>{game['title']}</b> - {game['discount']}% (${game['price']})\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in test digest command: {e}")
            await update.message.reply_text(get_text(language, 'digest_error'))

    async def admin_send_digest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
        user_id = update.effective_user.id
        language = self.db.get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_ids = [user_id]  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        if user_id not in admin_ids:
            await update.message.reply_text(get_text(language, 'admin_only'))
            return
        
        try:
            await update.message.reply_text(get_text(language, 'sending_digest'))
            await self.send_weekly_digest_to_all()
            await update.message.reply_text(get_text(language, 'digest_sent'))
                
        except Exception as e:
            logger.error(f"Error in admin send digest command: {e}")
            await update.message.reply_text(get_text(language, 'digest_send_error'))

    def split_message(self, message, max_length):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        chunks = []
        current_chunk = ""
        header_added = False
        
        lines = message.split('\n')
        header = lines[0] + '\n\n' if lines else ""
        
        for line in lines:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
            if not header_added and line.startswith("üéÆ"):
                header_added = True
                current_chunk = line + '\n\n'
                continue
                
            if len(current_chunk + line + '\n') > max_length:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                    # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —á–∞–Ω–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    current_chunk = f"üéÆ <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫</b>\n\n{line}\n"
                else:
                    chunks.append(line)
            else:
                current_chunk += line + '\n'
        
        if current_chunk:
            chunks.append(current_chunk.strip())
            
        return chunks
    
    async def send_deals_to_subscribers(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–∏–¥–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.subscribers:
            logger.info("No subscribers to send deals to")
            return
        
        try:
            deals = await self.scraper.get_discounted_games()
            if not deals:
                logger.info("No deals found to send")
                return
            
            message = "üîî <b>–ù–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏ –≤ Steam!</b>\n\n" + self.format_deals_message(deals)
            
            failed_sends = []
            for subscriber_id in self.subscribers.copy():
                try:
                    if len(message) > 4000:
                        chunks = self.split_message(message, 4000)
                        for chunk in chunks:
                            await self.bot.send_message(
                                chat_id=subscriber_id,
                                text=chunk,
                                parse_mode='HTML'
                            )
                    else:
                        await self.bot.send_message(
                            chat_id=subscriber_id,
                            text=message,
                            parse_mode='HTML'
                        )
                    logger.info(f"Sent deals to subscriber {subscriber_id}")
                except Exception as e:
                    logger.error(f"Failed to send to subscriber {subscriber_id}: {e}")
                    failed_sends.append(subscriber_id)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            for failed_id in failed_sends:
                self.subscribers.discard(failed_id)
            
            if failed_sends:
                self.save_subscribers()
                
        except Exception as e:
            logger.error(f"Error sending deals to subscribers: {e}")

    # ================== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==================
    
    async def wishlist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wishlist - –∞–Ω–∞–ª–∏–∑ Steam Wishlist"""
        user_id = update.effective_user.id
        user = update.effective_user
        language = self.db.get_user_language(user_id)
        self.db.add_user(user_id, user.username, user.first_name, user.last_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å)
        if context.args:
            profile_url = ' '.join(context.args)
            await self._process_wishlist(update, profile_url, language)
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
            if language == 'en':
                message = """
üíù <b>Steam Wishlist Analysis</b>

Send a link to your <b>public</b> Steam profile to check discounts on games from your wishlist.

üìù <b>Example links:</b>
‚Ä¢ https://steamcommunity.com/id/your_username
‚Ä¢ https://steamcommunity.com/profiles/76561198XXXXXXXXX

‚ö†Ô∏è <b>Important:</b> Profile must be public and wishlist must be open for viewing.

üîó Just send your Steam profile link to get started!
                """
            else:
                message = """
üíù <b>–ê–Ω–∞–ª–∏–∑ Steam Wishlist</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à <b>–ø—É–±–ª–∏—á–Ω—ã–π</b> Steam-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∏–¥–æ–∫ –Ω–∞ –∏–≥—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ.

üìù <b>–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:</b>
‚Ä¢ https://steamcommunity.com/id/–≤–∞—à_–Ω–∏–∫
‚Ä¢ https://steamcommunity.com/profiles/76561198XXXXXXXXX

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º, –∞ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ - –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

üîó –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Steam-–ø—Ä–æ—Ñ–∏–ª—å!
                """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
            self.set_user_state(user_id, 'waiting_for_wishlist_url')
            
            await update.message.reply_text(message, parse_mode='HTML')
    
    async def _process_wishlist(self, update: Update, profile_url: str, language: str = 'ru'):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ wishlist"""
        user_id = update.effective_user.id
        
        await update.message.reply_text(get_text(language, 'analyzing_wishlist'))
        
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.clear_user_state(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
            if not ('steamcommunity.com/id/' in profile_url or 'steamcommunity.com/profiles/' in profile_url):
                if language == 'en':
                    error_msg = (
                        "‚ùå <b>Invalid profile link</b>\n\n"
                        "Send a link in one of the formats:\n"
                        "‚Ä¢ https://steamcommunity.com/id/your_username\n"
                        "‚Ä¢ https://steamcommunity.com/profiles/76561198XXXXXXXXX"
                    )
                else:
                    error_msg = (
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                        "‚Ä¢ https://steamcommunity.com/id/–≤–∞—à_–Ω–∏–∫\n"
                        "‚Ä¢ https://steamcommunity.com/profiles/76561198XXXXXXXXX"
                    )
                await update.message.reply_text(error_msg, parse_mode='HTML')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫–∏ –∏–∑ wishlist
            discounted_games = await get_wishlist_discounts(profile_url)
            
            if not discounted_games:
                message = """
üòî <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Wishlist:</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –≤ –≤–∞—à–µ–º Wishlist.

<b>–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ üîí <b>Wishlist –ø—Ä–∏–≤–∞—Ç–Ω—ã–π</b> - –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–π, wishlist –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç
‚Ä¢ üìã <b>Wishlist –ø—É—Å—Ç–æ–π</b> - –≤ —Å–ø–∏—Å–∫–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –Ω–µ—Ç –∏–≥—Ä
‚Ä¢ üí∞ <b>–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Å–∫–∏–¥–æ–∫</b> - –Ω–∞ –∏–≥—Ä—ã –∏–∑ wishlist —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ü–∏–π
‚Ä¢ ‚è±Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Steam</b> - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API

<b>üîß –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ wishlist:</b>
1. –ó–∞–π–¥–∏—Ç–µ –≤ Steam ‚Üí –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
2. –ù–∞–∂–º–∏—Ç–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
3. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
4. –ù–∞–π–¥–∏—Ç–µ "–î–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã" ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>"–ü—É–±–ª–∏—á–Ω—ã–µ"</b>
5. –ù–∞–π–¥–∏—Ç–µ "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ" ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>"–ü—É–±–ª–∏—á–Ω—ã–π"</b>

<b>üéØ –í–∞–∂–Ω–æ:</b> Steam –∏–º–µ–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è:
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º)
‚Ä¢ –î–µ—Ç–∞–ª–µ–π –∏–≥—Ä (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –≤—Ä–µ–º—è –≤ –∏–≥—Ä–∞—Ö)
‚Ä¢ –°–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ (wishlist)

<b>üí° –ß—Ç–æ –µ—â–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ wishlist –µ—Å—Ç—å –∏–≥—Ä—ã
‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–π —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–±–µ–∑ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç)

<b>üîó –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>
Steam ‚Üí –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
                """
                await update.message.reply_text(message, parse_mode='HTML')
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = f"üíù <b>–°–∫–∏–¥–∫–∏ –≤ –≤–∞—à–µ–º Steam Wishlist ({len(discounted_games)} –∏–≥—Ä):</b>\n\n"
            
            for game in discounted_games[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 15 –∏–≥—Ä
                discount = game.get('discount_percent', 0)
                name = game.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
                final_price = game.get('final_formatted', '')
                initial_price = game.get('initial_formatted', '')
                url = game.get('url', '')
                
                # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏
                if discount >= 75:
                    emoji = "üî•"
                elif discount >= 50:
                    emoji = "‚ö°"
                elif discount >= 25:
                    emoji = "üí•"
                else:
                    emoji = "üí∞"
                
                message += f"{emoji} <b>{name}</b>\n"
                message += f"üí∏ –°–∫–∏–¥–∫–∞: <b>-{discount}%</b>\n"
                
                if initial_price and final_price:
                    message += f"üí∞ <s>{initial_price}</s> ‚Üí <b>{final_price}</b>\n"
                
                if url:
                    message += f"üîó <a href='{url}'>–ö—É–ø–∏—Ç—å –≤ Steam</a>\n"
                
                message += "\n"
            
            if len(discounted_games) > 15:
                message += f"üí° <i>–ò –µ—â–µ {len(discounted_games) - 15} –∏–≥—Ä —Å–æ —Å–∫–∏–¥–∫–∞–º–∏...</i>\n"
            
            message += "\nüéØ <i>–£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–π!</i>"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(message) > 4000:
                chunks = self.split_message(message, 4000)
                for chunk in chunks:
                    await update.message.reply_text(chunk, parse_mode='HTML', disable_web_page_preview=True)
            else:
                await update.message.reply_text(message, parse_mode='HTML', disable_web_page_preview=True)
                
        except Exception as e:
            logger.error(f"Error processing wishlist: {e}")
            error_message = """
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Wishlist</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

<b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ ‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
‚Ä¢ üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ üîí –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –∏ wishlist –ø—É–±–ª–∏—á–Ω—ã–µ
‚Ä¢ üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ (ID –≤–º–µ—Å—Ç–æ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)

üí¨ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.
            """
            await update.message.reply_text(error_message, parse_mode='HTML')
    
    
    async def ai_recommendations_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend - AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–≥—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ wishlist –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        user_id = update.effective_user.id
        user = update.effective_user
        language = self.db.get_user_language(user_id)
        self.db.add_user(user_id, user.username, user.first_name, user.last_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not AI_RECOMMENDATIONS_ENABLED:
            await update.message.reply_text(get_text(language, 'ai_not_available'))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ wishlist –≤ –∫–æ–º–∞–Ω–¥–µ
        if context.args:
            profile_url = ' '.join(context.args)
            await self._process_wishlist_ai_recommendations(update, profile_url, language)
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ wishlist
            if language == 'en':
                message = """
ü§ñ <b>AI Game Recommendations based on your Steam Wishlist</b>

Send a link to your Steam profile, and AI will analyze your wishlist and suggest similar games!

üìù <b>Example links:</b>
‚Ä¢ https://steamcommunity.com/profiles/76561198000000000
‚Ä¢ https://steamcommunity.com/id/your_username

üîç <b>What AI analyzes:</b>
‚Ä¢ Genres of games in your wishlist
‚Ä¢ Your Steam game library
‚Ä¢ Time spent in games
‚Ä¢ Game mechanics and preferences
‚Ä¢ Preferred game style
‚Ä¢ Game mood (dark, fun, etc.)

üéØ <b>What you get:</b>
‚Ä¢ Personalized game recommendations based on real preferences
‚Ä¢ Analysis of your gaming style
‚Ä¢ Compatibility score for each recommendation
‚Ä¢ Price estimates for recommended games

üí° <b>How to use:</b>
1. Make your Steam profile public
2. Send the profile link
3. Wait for AI analysis
4. Get personalized recommendations!

üîó Just send your Steam profile link to get started!
                """
            else:
                message = """
ü§ñ <b>–ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–≥—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ Steam Wishlist</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å, –∏ –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ—Ö–æ–∂–∏–µ –∏–≥—Ä—ã!

üìù <b>–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:</b>
‚Ä¢ https://steamcommunity.com/profiles/76561198000000000
‚Ä¢ https://steamcommunity.com/id/your_username

üîç <b>–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ò–ò:</b>
‚Ä¢ –ñ–∞–Ω—Ä—ã –∏–≥—Ä –≤ –≤–∞—à–µ–º wishlist
‚Ä¢ –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–≥—Ä Steam
‚Ä¢ –í—Ä–µ–º—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –∏–≥—Ä–∞—Ö
‚Ä¢ –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏–≥—Ä
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–≥—Ä (—Ç–µ–º–Ω—ã–µ, –≤–µ—Å–µ–ª—ã–µ –∏ —Ç.–¥.)

üéØ <b>–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–≥—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–≥—Ä—ã

üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–º
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
4. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!

üîó –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞!
                """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è wishlist
            self.set_user_state(user_id, 'waiting_for_wishlist_ai')
            
            await update.message.reply_text(message, parse_mode='HTML')
    
    async def _process_wishlist_ai_recommendations(self, update: Update, profile_url: str, language: str = 'ru'):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ wishlist –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.clear_user_state(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_text = get_text(language, 'generating_recommendations') if language == 'en' else 'ü§ñ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à wishlist –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã.'
        loading_message = await update.message.reply_text(loading_text)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ wishlist
            from steam_wishlist import SteamWishlistParser
            
            wishlist_games = []
            owned_games = []
            
            # –ü–æ–ª—É—á–∞–µ–º wishlist
            try:
                async with SteamWishlistParser() as parser:
                    steam_id = parser.extract_steam_id(profile_url)
                    if not steam_id:
                        await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Steam ID –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
                        return
                    
                    steam_id64 = await parser.resolve_steam_id(steam_id)
                    if steam_id64:
                        wishlist_games = await parser.get_wishlist_data(steam_id64)
                
                await loading_message.edit_text(f"üìã Wishlist –∑–∞–≥—Ä—É–∂–µ–Ω ({len(wishlist_games)} –∏–≥—Ä). –ó–∞–≥—Ä—É–∂–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä...")
            
            except Exception as e:
                logger.warning(f"Could not load wishlist: {e}")
                await loading_message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å wishlist. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä
            try:
                owned_games = await get_steam_library(profile_url, limit=30)
                
                if owned_games:
                    total_games = len(wishlist_games) + len(owned_games)
                    await loading_message.edit_text(f"ÔøΩ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: wishlist ({len(wishlist_games)} –∏–≥—Ä) + –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ({len(owned_games)} –∏–≥—Ä) = {total_games} –∏–≥—Ä. –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
                else:
                    if not wishlist_games:
                        await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ wishlist, –Ω–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–π.")
                        return
                    else:
                        await loading_message.edit_text(f"üìã –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ wishlist –∑–∞–≥—Ä—É–∂–µ–Ω ({len(wishlist_games)} –∏–≥—Ä). –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            
            except Exception as e:
                logger.warning(f"Could not load library: {e}")
                if not wishlist_games:
                    await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏—á–Ω—ã–µ.")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            total_games = len(wishlist_games) + len(owned_games)
            if total_games < 3:
                await loading_message.edit_text("üìã –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–≥—Ä –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä –≤ wishlist –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–≥—Ä.")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            ai_result = await get_ai_game_recommendations(
                wishlist_games, 
                owned_games,
                OPENROUTER_API_KEY, 
                AI_MAX_RECOMMENDATIONS,
                language
            )
            
            if not ai_result['success']:
                error_msg = ai_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await loading_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {error_msg}")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            await self._send_ai_recommendations_response(update, ai_result, loading_message)
            
        except Exception as e:
            logger.error(f"Error in AI recommendations: {e}")
            await loading_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _send_ai_recommendations_response(self, update: Update, ai_result: dict, loading_message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        try:
            recommendations = ai_result['recommendations']
            analysis = ai_result['analysis']
            total_wishlist = ai_result['total_wishlist_games']
            total_owned = ai_result.get('total_owned_games', 0)
            total_analyzed = ai_result.get('total_games_analyzed', total_wishlist)
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"ü§ñ <b>–ò–ò-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ Steam –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            message += f"üìä <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–≥—Ä:</b> {total_analyzed}\n"
            message += f"   üíù Wishlist: {total_wishlist} –∏–≥—Ä\n"
            if total_owned > 0:
                message += f"   üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {total_owned} –∏–≥—Ä\n"
            message += "\n"
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            if analysis:
                if 'top_genres' in analysis and analysis['top_genres']:
                    genres = ', '.join(analysis['top_genres'][:3])
                    message += f"üéÆ <b>–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã:</b> {genres}\n"
                
                if 'preferred_mechanics' in analysis and analysis['preferred_mechanics']:
                    mechanics = ', '.join(analysis['preferred_mechanics'][:3])
                    message += f"‚öôÔ∏è <b>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:</b> {mechanics}\n"
                
                if 'gaming_style' in analysis:
                    style = analysis['gaming_style'][:150]
                    message += f"üéØ <b>–í–∞—à —Å—Ç–∏–ª—å –∏–≥—Ä—ã:</b> {style}\n"
                
                if 'analysis_summary' in analysis:
                    summary = analysis['analysis_summary'][:200]
                    message += f"\nüí≠ <b>–ê–Ω–∞–ª–∏–∑ –ò–ò:</b> {summary}\n"
                
                message += "\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if recommendations:
                message += f"üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(recommendations)}):</b>\n\n"
                
                for i, rec in enumerate(recommendations[:6], 1):
                    name = rec.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
                    description = rec.get('description', '')[:120]
                    reason = rec.get('reason', '')[:120]
                    price = rec.get('estimated_price', '–¶–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
                    similarity = rec.get('similarity_score', 0)
                    
                    # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    if similarity >= 90:
                        emoji = "üî•"
                    elif similarity >= 85:
                        emoji = "‚≠ê"  
                    else:
                        emoji = "‚ú®"
                    
                    message += f"{emoji} <b>{i}. {name}</b> ({similarity}% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)\n"
                    if description:
                        message += f"üìù {description}\n"
                    if reason:
                        message += f"üí° <i>{reason}</i>\n"
                    if price != '–¶–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞':
                        message += f"üí∞ {price}\n"
                    message += "\n"
            else:
                message += "üòî –ò–ò –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            message += "ÔøΩ <b>–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–∫–∏–¥–∫–∏?</b>\n"
            message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wishlist —Å —Ç–æ–π –∂–µ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫ –Ω–∞ –∏–≥—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å
            if total_owned > 0:
                message += f"\n\nüí° –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∞—à wishlist, –Ω–æ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–≥—Ä!"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 4000:
                message = message[:3900] + "\n\n... <i>–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ</i>"
            
            await loading_message.edit_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error sending AI recommendations response: {e}")
            await loading_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
    
    async def _process_ai_recommendations(self, update: Update, favorite_games: List[str]):
        """–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ wishlist-–∞–Ω–∞–ª–∏–∑"""
        message = """
ü§ñ <b>–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!</b>

–¢–µ–ø–µ—Ä—å –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à Steam Wishlist –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /recommend
–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Steam –ø—Ä–æ—Ñ–∏–ª—å.

–≠—Ç–æ –¥–∞—Å—Ç –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! üéØ
        """
        await update.message.reply_text(message, parse_mode='HTML')

    async def handle_text_messages_conditionally(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.cleanup_expired_states()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞
        if user_id not in self.user_states:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        await self.handle_text_messages(update, context)

    async def handle_text_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è)"""
        user_id = update.effective_user.id
        
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        state = self.user_states[user_id]
        message_text = update.message.text.strip()
        
        try:
            if state == 'waiting_for_wishlist_url':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ Steam –ø—Ä–æ—Ñ–∏–ª—å
                if 'steamcommunity.com/' in message_text:
                    await self._process_wishlist(update, message_text)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:\n"
                        "https://steamcommunity.com/id/–≤–∞—à_–Ω–∏–∫\n"
                        "–∏–ª–∏\n"
                        "https://steamcommunity.com/profiles/76561198XXXXXXXXX"
                    )
            
            elif state == 'waiting_for_wishlist_ai':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ wishlist
                if 'steamcommunity.com/' in message_text:
                    await self._process_wishlist_ai_recommendations(update, message_text)
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:\n"
                        "https://steamcommunity.com/id/–≤–∞—à_–Ω–∏–∫\n"
                        "–∏–ª–∏\n"
                        "https://steamcommunity.com/profiles/76561198XXXXXXXXX"
                    )
            
            elif state == 'waiting_for_favorite_games':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –∏–≥—Ä
                # –ü–∞—Ä—Å–∏–º –∏–≥—Ä—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏
                favorite_games = [game.strip() for game in message_text.split(',')]
                if len(favorite_games) < 2:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
                    separators = [';', '\n', ' –∏ ', ' and ']
                    for sep in separators:
                        if sep in message_text:
                            favorite_games = [game.strip() for game in message_text.split(sep)]
                            break
                
                if len(favorite_games) < 2:
                    await update.message.reply_text(
                        "üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –∏–≥—Ä—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
                        "–†–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: The Witcher 3, Skyrim, Cyberpunk 2077"
                    )
                    return
                
                await self._process_ai_recommendations(update, favorite_games)
                
            elif state == 'waiting_bug_report':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ
                await self._process_bug_report(update, message_text)
                
            elif state == 'waiting_feature_request':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                await self._process_feature_request(update, message_text)
                
            elif state == 'waiting_review':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤
                await self._process_user_review(update, message_text)
                
        except Exception as e:
            logger.error(f"Error handling text message: {e}")
            self.clear_user_state(user_id)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")

    async def feedback_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        try:
            user = update.effective_user
            user_id = user.id
            username = user.username or user.first_name or str(user_id)
            language = self.db.get_user_language(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            self.db.add_user(user_id, user.username, user.first_name, user.last_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            args = context.args
            if not args:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–∑—ã–≤–∞
                keyboard = [
                    [
                        InlineKeyboardButton(get_text(language, 'report_bug'), callback_data="feedback_bug"),
                        InlineKeyboardButton(get_text(language, 'suggest_feature'), callback_data="feedback_feature")
                    ],
                    [
                        InlineKeyboardButton(get_text(language, 'leave_review'), callback_data="feedback_review"),
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message = get_text(language, 'feedback_menu_title')
                
                await update.message.reply_text(
                    message,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                return
                
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—â–∏–π –æ—Ç–∑—ã–≤
            feedback_text = " ".join(args)
            
            if len(feedback_text) < 10:
                await update.message.reply_text(
                    "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ü—Ä–∏–º–µ—Ä: `/feedback –ë–æ—Ç –æ—Ç–ª–∏—á–Ω—ã–π, –Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤`"
                )
                return
                
            if len(feedback_text) > 1000:
                await update.message.reply_text(
                    "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –ë–î
            feedback_id = self.db.add_feedback(user_id, username, "general", feedback_text)
            
            if feedback_id:
                await update.message.reply_text(
                    f"‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!**\n\n"
                    f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.\n"
                    f"ID –æ—Ç–∑—ã–≤–∞: `{feedback_id}`\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/feedback` –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                    parse_mode='Markdown'
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
                logger.info(f"New feedback from {username} (ID: {user_id}): {feedback_text[:50]}...")
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"Error in feedback command: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _process_bug_report(self, update: Update, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–µ"""
        user = update.effective_user
        user_id = user.id
        username = user.username or user.first_name or str(user_id)
        
        if len(message_text) < 10:
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
            )
            return
            
        if len(message_text) > 1000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç
        feedback_id = self.db.add_feedback(user_id, username, "bug", message_text)
        
        if feedback_id:
            await update.message.reply_text(
                f"üêõ **–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ!**\n\n"
                f"–í–∞—à –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.\n"
                f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: `{feedback_id}`\n\n"
                f"üîß –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.",
                parse_mode='Markdown'
            )
            logger.info(f"Bug report from {username} (ID: {user_id}): {message_text[:50]}...")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        self.clear_user_state(user_id)

    async def _process_feature_request(self, update: Update, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        user = update.effective_user
        user_id = user.id
        username = user.username or user.first_name or str(user_id)
        
        if len(message_text) < 10:
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
            )
            return
            
        if len(message_text) > 1000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        feedback_id = self.db.add_feedback(user_id, username, "feature", message_text)
        
        if feedback_id:
            await update.message.reply_text(
                f"üí° **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!**\n\n"
                f"–í–∞—à–∞ –∏–¥–µ—è –ø–æ–ª—É—á–µ–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.\n"
                f"ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: `{feedback_id}`\n\n"
                f"üöÄ –ï—Å–ª–∏ –∏–¥–µ—è –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–π, –º—ã –¥–æ–±–∞–≤–∏–º –µ—ë –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –±–æ—Ç–∞!",
                parse_mode='Markdown'
            )
            logger.info(f"Feature request from {username} (ID: {user_id}): {message_text[:50]}...")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        self.clear_user_state(user_id)

    async def _process_user_review(self, update: Update, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        user_id = user.id
        username = user.username or user.first_name or str(user_id)
        
        if len(message_text) < 5:
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –±–æ—Ç–µ."
            )
            return
            
        if len(message_text) > 1000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
            
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        rating = None
        rating_patterns = [
            r'([1-5])/5',  # "4/5"
            r'([1-5]) –∑–≤–µ–∑–¥',  # "4 –∑–≤–µ–∑–¥—ã"
            r'([1-5]) –∏–∑ 5',  # "4 –∏–∑ 5"
            r'‚≠ê{1,5}',  # –∑–≤–µ–∑–¥–æ—á–∫–∏
            r'([1-5]) –±–∞–ª–ª',  # "4 –±–∞–ª–ª–∞"
        ]
        
        for pattern in rating_patterns:
            import re
            match = re.search(pattern, message_text)
            if match:
                if pattern == r'‚≠ê{1,5}':
                    rating = len(match.group())
                else:
                    rating = int(match.group(1))
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        feedback_id = self.db.add_feedback(user_id, username, "compliment", message_text, rating)
        
        if feedback_id:
            rating_text = f" (‚≠ê {rating}/5)" if rating else ""
            await update.message.reply_text(
                f"‚ù§Ô∏è **–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!**{rating_text}\n\n"
                f"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!\n"
                f"ID –æ—Ç–∑—ã–≤–∞: `{feedback_id}`\n\n"
                f"üôè –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –æ—Ç–∑—ã–≤–∞–º –º—ã –¥–µ–ª–∞–µ–º –±–æ—Ç–∞ –ª—É—á—à–µ!",
                parse_mode='Markdown'
            )
            logger.info(f"Review from {username} (ID: {user_id}): {message_text[:50]}... Rating: {rating}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        self.clear_user_state(user_id)

    # ================== –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ==================
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        schedule.every(6).hours.do(lambda: asyncio.run(self.send_deals_to_subscribers()))
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        schedule.every(5).minutes.do(self.cleanup_expired_states)
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∫–∏–¥–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=self.run_scheduler, daemon=True)
        scheduler_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        self.start_scheduler()
        
        logger.info("Starting bot...")
        self.application.run_polling()

if __name__ == "__main__":
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    BOT_TOKEN = "7915606832:AAGLp_s79kuESeGZPRClXybqEAj65TzAn_E"
    
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–¥, —É–∫–∞–∑–∞–≤ —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
        exit(1)
    
    bot = SteamDiscountBot(BOT_TOKEN)
    bot.run()
