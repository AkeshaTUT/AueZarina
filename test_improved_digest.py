#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import DatabaseManager

def test_improved_digest_algorithm():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä"""
    
    print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û–ì–û –î–ê–ô–î–ñ–ï–°–¢–ê")
    print("=" * 65)
    print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = DatabaseManager()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    db.clear_weekly_top()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    test_games = [
        # –§–æ—Ä–º–∞—Ç: (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∫–∏–¥–∫–∞, —Ü–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º—ã–π_—Ä–µ–π—Ç–∏–Ω–≥_–ø—Ä–∏–º–µ—Ä–Ω–æ)
        ("Cyberpunk 2077", 85, 399.0, "–≤—ã—Å–æ–∫–∏–π (–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–≥—Ä–∞ + —Ö–æ—Ä–æ—à–∞—è —Å–∫–∏–¥–∫–∞)"),
        ("The Witcher 3: Wild Hunt", 90, 199.0, "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π (—Ç–æ–ø –∏–≥—Ä–∞ + –æ—Ç–ª–∏—á–Ω–∞—è —Å–∫–∏–¥–∫–∞ + —Ö–æ—Ä–æ—à–∞—è —Ü–µ–Ω–∞)"),
        ("Unknown Indie Game", 95, 50.0, "—Å—Ä–µ–¥–Ω–∏–π (–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞, –Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞)"),
        ("Call of Duty: Modern Warfare", 75, 2500.0, "–≤—ã—Å–æ–∫–∏–π (–ø–æ–ø—É–ª—è—Ä–Ω–∞—è, –Ω–æ –¥–æ—Ä–æ–≥–∞—è)"),
        ("Stardew Valley", 60, 299.0, "–≤—ã—Å–æ–∫–∏–π (–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–Ω–¥–∏ –∏–≥—Ä–∞)"),
        ("Random DLC Pack", 90, 100.0, "–Ω–∏–∑–∫–∏–π (DLC —à—Ç—Ä–∞—Ñ—É–µ—Ç—Å—è)"),
        ("Fallout 4", 80, 599.0, "–≤—ã—Å–æ–∫–∏–π (–ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Å–µ—Ä–∏—è)"),
        ("Some Game 2012", 95, 150.0, "—Å—Ä–µ–¥–Ω–∏–π (—Å—Ç–∞—Ä–∞—è –∏–≥—Ä–∞)"),
        ("FIFA 2024", 70, 1999.0, "–≤—ã—Å–æ–∫–∏–π (–ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Å–µ—Ä–∏—è)"),
        ("Hollow Knight", 50, 349.0, "–≤—ã—Å–æ–∫–∏–π (–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏–Ω–¥–∏)")
    ]
    
    print("üìä –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
    print("-" * 40)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–π—Ç–∏–Ω–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    scored_games = []
    
    for title, discount, price, expected in test_games:
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–π—Ç–∏–Ω–≥–∞
        score = calculate_test_score(title, discount, price)
        
        scored_games.append({
            'title': title,
            'discount': discount, 
            'price': price,
            'score': score,
            'expected': expected
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        db.add_weekly_top_game(title, discount, price, score)
        
        print(f"üéÆ {title}")
        print(f"   üí∏ –°–∫–∏–¥–∫–∞: {discount}%")
        print(f"   üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ")
        print(f"   üìä –†–µ–π—Ç–∏–Ω–≥: {score:.1f}/200")
        print(f"   üí° –û–∂–∏–¥–∞–Ω–∏–µ: {expected}")
        print()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    sorted_games = sorted(scored_games, key=lambda x: x['score'], reverse=True)
    
    print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ô–¢–ò–ù–ì–ê (—Ç–æ–ø-5):")
    print("-" * 35)
    
    for i, game in enumerate(sorted_games[:5], 1):
        emoji = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"][i-1]
        score = game['score']
        
        # –≠–º–æ–¥–∑–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if score >= 150:
            quality_emoji = "‚≠ê"
        elif score >= 100:
            quality_emoji = "üî•"
        elif score >= 80:
            quality_emoji = "‚ú®"
        else:
            quality_emoji = "üí∞"
        
        print(f"{emoji} {quality_emoji} {game['title']}")
        print(f"    üí∏ –°–∫–∏–¥–∫–∞: -{game['discount']}%")
        print(f"    üí∞ –¶–µ–Ω–∞: {game['price']}‚ÇΩ")
        print(f"    üìä –†–µ–π—Ç–∏–Ω–≥: {score:.1f}/200")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("üíæ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    print("-" * 30)
    
    weekly_top = db.get_weekly_top_games(10)
    
    if weekly_top:
        print(f"‚úÖ –í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ {len(weekly_top)} –∏–≥—Ä")
        print("–ü–æ—Ä—è–¥–æ–∫ –≤ –±–∞–∑–µ (–ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É):")
        for i, game in enumerate(weekly_top, 1):
            score = game.get('score', 0)
            print(f"  {i}. {game['title']} - —Ä–µ–π—Ç–∏–Ω–≥: {score:.1f}, —Å–∫–∏–¥–∫–∞: {game['discount']}%")
    else:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –ê–õ–ì–û–†–ò–¢–ú–ê:")
    print("-" * 25)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã –ø–æ–¥–Ω—è–ª–∏—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    popular_games = [g for g in sorted_games if any(keyword in g['title'].lower() 
                    for keyword in ['witcher', 'cyberpunk', 'fallout', 'call of duty'])]
    
    indie_games = [g for g in sorted_games if any(keyword in g['title'].lower() 
                  for keyword in ['stardew', 'hollow knight'])]
    
    dlc_games = [g for g in sorted_games if 'dlc' in g['title'].lower()]
    
    print(f"üéØ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ AAA –∏–≥—Ä—ã –≤ —Ç–æ–ø–µ: {len([g for g in popular_games if g['score'] >= 100])}/{len(popular_games)}")
    print(f"üéÆ –ò–Ω–¥–∏ –∏–≥—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: {len([g for g in indie_games if g['score'] >= 80])}/{len(indie_games)}")
    print(f"üì¶ DLC –ø–æ–ª—É—á–∏–ª–∏ —à—Ç—Ä–∞—Ñ: {len([g for g in dlc_games if g['score'] < 80])}/{len(dlc_games)}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –í–´–í–û–î–´:")
    print("-" * 15)
    
    if len(popular_games) > 0 and popular_games[0]['score'] > 120:
        print("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä")
    else:
        print("‚ö†Ô∏è –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å")
    
    if len(dlc_games) > 0 and dlc_games[0]['score'] < 100:
        print("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à—Ç—Ä–∞—Ñ—É–µ—Ç DLC")
    else:
        print("‚ö†Ô∏è –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ DLC")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
    affordable_quality = [g for g in sorted_games if g['price'] <= 600 and g['score'] >= 100]
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–≥—Ä –≤ —Ç–æ–ø–µ: {len(affordable_quality)}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    db.clear_weekly_top()
    
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
    print("üöÄ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

def calculate_test_score(title, discount, price):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    title_lower = title.lower()
    
    # 1. –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–∫–∏–¥–∫–∏
    discount_score = min(discount, 90)
    
    # 2. –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
    popularity_score = 0
    popular_keywords = [
        'cyberpunk', 'witcher', 'fallout', 'call of duty', 'fifa', 
        'stardew valley', 'hollow knight', 'gta'
    ]
    
    for keyword in popular_keywords:
        if keyword in title_lower:
            popularity_score += 30
            break
    
    # 3. –¶–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    price_score = 0
    if 0 < price <= 500:
        price_score = 25
    elif 500 < price <= 1500:
        price_score = 20
    elif 1500 < price <= 3000:
        price_score = 15
    else:
        price_score = 5
    
    # 4. –®—Ç—Ä–∞—Ñ—ã
    penalty = 0
    if 'dlc' in title_lower:
        penalty += 15
    
    # –ì–æ–¥—ã –¥–ª—è —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã
    old_years = ['2010', '2011', '2012', '2013']
    for year in old_years:
        if year in title:
            penalty += 10
            break
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    final_score = discount_score + popularity_score + price_score - penalty
    return max(0, min(final_score, 200))

if __name__ == "__main__":
    test_improved_digest_algorithm()
