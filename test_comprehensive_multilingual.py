#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ ZarinAI Bot
"""

import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import DatabaseManager
from translations import get_text, get_available_languages

def comprehensive_multilingual_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    print("üåê –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ú–ù–û–ì–û–Ø–ó–´–ß–ù–û–ì–û ZARINAI BOT")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = DatabaseManager()
    
    print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {get_available_languages()}")
    print()
    
    # ===== –¢–ï–°–¢ 1: –°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–í–û–î–û–í =====
    print("üß™ –¢–ï–°–¢ 1: –°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–í–û–î–û–í")
    print("-" * 35)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    critical_functions = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        ('start_command', ['welcome_title', 'welcome_description', 'choose_language']),
        ('help_command', ['all_commands', 'basic_title', 'new_title']),
        ('subscribe_command', ['subscribed_success', 'already_subscribed']),
        ('deals_command', ['searching_deals', 'no_suitable_deals', 'error_getting_deals']),
        ('free_command', ['searching_free_games', 'no_free_games', 'error_free_games']),
        ('settings_command', ['your_settings', 'subscription_status', 'change_language']),
        
        # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        ('weeklydigest_command', ['weekly_digest_title', 'weekly_digest_subtitle', 'weekly_digest_cta']),
        ('wishlist_command', ['analyzing_wishlist', 'enter_steam_id']),
        ('ai_recommend_command', ['generating_recommendations', 'ai_not_available']),
        ('feedback_command', ['feedback_menu_title', 'report_bug', 'suggest_feature']),
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        ('admin_commands', ['admin_only', 'digest_test_title', 'sending_digest', 'digest_sent'])
    ]
    
    total_keys = 0
    missing_keys = []
    
    for function_name, keys in critical_functions:
        print(f"  üîç {function_name}:")
        for key in keys:
            total_keys += 1
            for lang in get_available_languages():
                try:
                    text = get_text(lang, key)
                    if f"[MISSING: {key}]" in text:
                        missing_keys.append(f"{lang}:{key}")
                        print(f"    ‚ùå {lang}:{key} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    else:
                        print(f"    ‚úÖ {lang}:{key} - OK")
                except Exception as e:
                    missing_keys.append(f"{lang}:{key}")
                    print(f"    ‚ùå {lang}:{key} - –û–®–ò–ë–ö–ê: {e}")
    
    translation_success = len(missing_keys) == 0
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
    print(f"  üìã –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {total_keys * len(get_available_languages())}")
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {total_keys * len(get_available_languages()) - len(missing_keys)}")
    print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_keys)}")
    print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {((total_keys * len(get_available_languages()) - len(missing_keys)) / (total_keys * len(get_available_languages())) * 100):.1f}%")
    
    # ===== –¢–ï–°–¢ 2: –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
    print(f"\nüß™ –¢–ï–°–¢ 2: –ú–ù–û–ì–û–Ø–ó–´–ß–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —è–∑—ã–∫–æ–≤
    test_user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    try:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.remove_user(test_user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_user(test_user_id, "test_user", "Test", "User")
        print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        for lang in get_available_languages():
            db.set_user_language(test_user_id, lang)
            retrieved_lang = db.get_user_language(test_user_id)
            if retrieved_lang == lang:
                print(f"  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ {lang}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"  ‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ {lang}: –æ—à–∏–±–∫–∞ ({retrieved_lang})")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = db.get_user_settings(test_user_id)
        if 'language' in settings:
            print("  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —è–∑—ã–∫–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("  ‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —è–∑—ã–∫–æ–º: –æ—à–∏–±–∫–∞")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.remove_user(test_user_id)
        
        database_success = True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        database_success = False
    
    # ===== –¢–ï–°–¢ 3: –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢ =====
    print(f"\nüß™ –¢–ï–°–¢ 3: –ú–ù–û–ì–û–Ø–ó–´–ß–ù–´–ô –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢")
    print("-" * 50)
    
    try:
        # –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.clear_weekly_top()
        
        test_games = [
            ("Cyberpunk 2077", 85, 1299.0),
            ("The Witcher 3", 90, 599.0),
            ("Red Dead Redemption 2", 75, 1499.0)
        ]
        
        for title, discount, price in test_games:
            db.add_weekly_top_game(title, discount, price)
        
        weekly_data = db.get_weekly_top_games(5)
        
        if weekly_data:
            print(f"  ‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(weekly_data)} –∏–≥—Ä)")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
            for lang in get_available_languages():
                try:
                    message = get_text(lang, 'weekly_digest_title') + "\n\n"
                    message += get_text(lang, 'weekly_digest_subtitle') + "\n\n"
                    
                    for i, game in enumerate(weekly_data[:3], 1):
                        emoji = ["ü•á", "ü•à", "ü•â"][i-1]
                        message += f"{emoji} {game['title']}\n"
                        
                        if lang == 'ru':
                            message += f"üí∏ –°–∫–∏–¥–∫–∞: -{game['discount']}%\n"
                            message += f"üí∞ –¶–µ–Ω–∞: {game['price']}‚ÇΩ\n\n"
                        else:
                            message += f"üí∏ Discount: -{game['discount']}%\n"
                            message += f"üí∞ Price: ${game['price']}\n\n"
                    
                    message += get_text(lang, 'weekly_digest_cta')
                    
                    if len(message) > 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ—Å—å
                        lang_name = "–†—É—Å—Å–∫–∏–π" if lang == 'ru' else "English"
                        print(f"  ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ {lang_name}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print(f"  ‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ {lang}: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        
                except Exception as e:
                    print(f"  ‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞ {lang}: –æ—à–∏–±–∫–∞ ({e})")
            
        else:
            print("  ‚ùå –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.clear_weekly_top()
        digest_success = True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
        digest_success = False
    
    # ===== –¢–ï–°–¢ 4: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====
    print(f"\nüß™ –¢–ï–°–¢ 4: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("-" * 40)
    
    integration_tests = [
        ("–ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤", translation_success),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", database_success),
        ("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", digest_success),
    ]
    
    integration_success = True
    for test_name, result in integration_tests:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if not result:
            integration_success = False
    
    # ===== –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ =====
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 45)
    
    overall_success = translation_success and database_success and digest_success and integration_success
    
    if overall_success:
        status_icon = "üéâ"
        status_text = "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
        status_color = "üü¢"
    else:
        status_icon = "‚ö†Ô∏è"
        status_text = "–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´"
        status_color = "üî¥"
    
    print(f"{status_color} {status_icon} {status_text}")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 25)
    print(f"üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {len(get_available_languages())}")
    print(f"üîë –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {total_keys}")
    print(f"üìã –û–±—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_keys * len(get_available_languages())}")
    print(f"üéØ –§—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞: {len(critical_functions)}")
    print(f"üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(integration_tests)}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 20)
    
    if overall_success:
        print("‚úÖ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   ‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("   ‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç—ã")
        print("   ‚Ä¢ –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç")
        print("   ‚Ä¢ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        
        if missing_keys:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã: {len(missing_keys)}")
            print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –≤ translations.py")
        
        if not database_success:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ database.py –∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        if not digest_success:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–º")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    print(f"\nüìã –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ó–ê–ü–£–°–ö–£:")
    print("-" * 30)
    
    readiness_score = sum([translation_success, database_success, digest_success, integration_success])
    readiness_percent = (readiness_score / 4) * 100
    
    if readiness_percent >= 100:
        print("üü¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í (100%)")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω")
    elif readiness_percent >= 80:
        print(f"üü° –ü–û–ß–¢–ò –ì–û–¢–û–í ({readiness_percent:.0f}%)")
        print("üîß –ù—É–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print(f"üî¥ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò ({readiness_percent:.0f}%)")
        print("‚öôÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print(f"\nüîö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
    return overall_success

if __name__ == "__main__":
    success = comprehensive_multilingual_test()
    sys.exit(0 if success else 1)
